<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DriveWorks.Applications</name>
  </assembly>
  <members>
    <member name="T:DriveWorks.Applications.IAboutService">
      <summary>Provides access to the application's about screen.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IApplication">
      <summary>Provides information about a DriveWorks application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IApplicationEvent">
      <summary>Represents an event from an application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IApplicationEventService">
      <summary>Provides support for listening to application-wide events.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IApplicationSelectionManager">
      <summary>Provides information about the application's active selection site.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICheckableCommandButton">
      <summary>Represents a checkable command button.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommand">
      <summary>Represents a command registered with a command manager.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommandBarGroup">
      <summary>Represents a group of command buttons on an application command bar.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommandBarManager">
      <summary>Provides a contract for an object which manages an application's command bar.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommandButton">
      <summary>Represents a command button.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommandContextHelper">
      <summary>Provides a contract for an object capable of processing contextual data for commands which are context-specific.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommandManager">
      <summary>Provides a contract for an object which manages commands for an application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommandMonitor">
      <summary>Represents an object that observes an .</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommandOverride">
      <summary>Provides support for overriding the behavior of a command.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ICommandOverrideService">
      <summary>Provides support for overriding the implementation of a predefined/existing command.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IDialogPreferences">
      <summary>Implemented by hosted forms (e.g. for forms and dialogs) to indicate window related preferences to the host.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IEvent">
      <summary>Provides support for passing an event as an object.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IExceptionHandler">
      <summary>Provides a contract for an object which handles exceptions.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IGroupCredentialsProvider">
      <summary>Provides a contract for an object which can provide, on request, the credentials for a group.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IGroupService">
      <summary>Provides a contract implemented by objects which expose a DriveWorks group.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IHasChildren">
      <summary>Provides a contract for an object that has child objects.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IHasCommand">
      <summary>Provides a contract for objects which have a command.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IHasHelp">
      <summary>Provides a contract for objects which can display help information.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IHasItemCommands">
      <summary>Provide a contract for an object that has item commands.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IHasState">
      <summary>Implemented by objects which have states which other objects can react to.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IHasValidation">
      <summary>Provides a contract for objects which can be valid/invalid. For example, can be used with wizard steps to automatically support enabling/disabling the Next
button.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IHelpService">
      <summary>Provides access to the help engine used by an application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IInteraction">
      <summary>Provides a contract for objects which support interacting with a user.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IKeyboardShortcutService">
      <summary>Provides a contract for a service which manages keyboard shortcuts.</summary>
    </member>
    <member name="T:DriveWorks.Applications.INotifyExceptionThrown">
      <summary>Provides a contract for reporting exceptions.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IPendingChangesService">
      <summary>Provides a service that will allow for external services to hook into a central pending changes system.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IPreviewControl">
      <summary>Provides a contract for a control used for previewing the result of an .</summary>
    </member>
    <member name="T:DriveWorks.Applications.IProjectService">
      <summary>Provides a contract implemented by objects which expose a DriveWorks project.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IQuickBarManager">
      <summary>Provides a contract for an object which manages an application's quick bar.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IRefreshable">
      <summary>Provides a contract for data management views which are refreshable.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IRequiresApplication">
      <summary>Implemented by demand-created objects requiring access to the hosting application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ISelectionSite">
      <summary>Provides a contract for an object which supports selections.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IServiceFactory">
      <summary>Provides a contract for objects which can create services as they are required.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IServiceManager">
      <summary>Provides a contract for an object which manages services for an application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ISettingsManager">
      <summary>Provides settings pages with access to settings.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ISpecificationFactory">
      <summary>Provides a contract for objects which create specification contexts.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ISpecificationRequestWithEdit">
      <summary>Encapsulates all the data required to automate the creating and editing of specifications.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ISpecificationService">
      <summary>Provides support for observing the creation of specification contexts.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IStatusBarService">
      <summary>Provides access to the hosting application's status bar.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ITransactionManager">
      <summary>Provides a contract for an object which coordinates undo/redo transactions for an application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IUpdateable">
      <summary>Provides a contract for objects which support suppressing and resuming updates to allow for many changes to be made quickly.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IUserMessageService">
      <summary>Provides a contract an object that will raise messages intended for end users.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IView">
      <summary>The interface implemented by application views.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IViewCommandBarManager">
      <summary>Provides a contract for an object which manages an application's command bar for a single view.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IViewEnvironment">
      <summary>Provides access to the environment in which a view is running.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IViewManager">
      <summary>Provides support for working with an application's views.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IViewRegistrationService">
      <summary>Provides support for adding views to the application's view manager.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IVirtualSplitCommandButton">
      <summary>Represents a virtualized split command button.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IWizard">
      <summary>Provides a contract for a wizard.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IWizardService">
      <summary>Provides a contract for a service capable of running a wizard.</summary>
    </member>
    <member name="T:DriveWorks.Applications.IWizardStep">
      <summary>Provides a convenient contract for retrieving information about a wizard step which implements this interface.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IAboutService.ShowDialog">
      <summary>Shows the about screen as a dialog.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplication.Id">
      <summary>Gets an identifier which uniquely identifies the application.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplication.MainWindowHandle">
      <summary>Returns the window handle of the main form of the application.</summary>
      <returns>The window handle of the main window of the application if supported, otherwise .</returns>
    </member>
    <member name="P:DriveWorks.Applications.IApplication.Name">
      <summary>Gets the name of the application.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplication.ServiceManager">
      <summary>Gets the object responsible for managing services for the application.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplication.SettingsManager">
      <summary>Gets the object responsible for managing settings for the application.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplication.Version">
      <summary>Gets the version of the application</summary>
    </member>
    <member name="E:DriveWorks.Applications.IApplication.Closing">
      <summary>Raised when the application is being closed.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationEvent.DateAndTime">
      <summary>Gets the date and time the event was logged.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationEvent.Description">
      <summary>Gets the description of the event.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationEvent.SourceDisplayName">
      <summary>Gets the display name of the source of the event.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationEvent.SourceInvariantName">
      <summary>Gets the invariant name of the source of the event.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationEvent.TargetDisplayName">
      <summary>Gets the display name of the target of the event if appropriate (may be null).</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationEvent.TargetInvariantName">
      <summary>Gets the invariant name of the target of the event if appropriate (may be null).</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationEvent.Type">
      <summary>Gets the type of the event.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationEvent.Url">
      <summary>Gets a url, which may be a local file path, describing a resource containing information relevant to the event (may be null).</summary>
    </member>
    <member name="M:DriveWorks.Applications.IApplicationEventService.AddEvent(DriveWorks.Applications.ApplicationEventType,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Adds an event to the event log.</summary>
      <param name="type">The type of the event.</param>
      <param name="sourceInvariantName">The invariant name of the source of the event (required).</param>
      <param name="sourceDisplayName">The display name of the source of the event (required).</param>
      <param name="description">The description of the event (required).</param>
      <param name="targetInvariantName">The invariant name of the target of the event (optional).</param>
      <param name="targetDisplayName">The display name of the target of the event (optional).</param>
      <param name="url">A url, which may be a local file path, describing a resource containing information relevant to the event (optional).</param>
    </member>
    <member name="M:DriveWorks.Applications.IApplicationEventService.ClearEvents">
      <summary>Clears the entire application event log.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IApplicationEventService.GetEvents">
      <summary>Gets all the events in the event log.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IApplicationEventService.EventLogged">
      <summary>Raised when an event is logged.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IApplicationEventService.EventsCleared">
      <summary>Raised when the events are cleared.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IApplicationSelectionManager.ActiveSite">
      <summary>Gets the active selection site in the application.</summary>
      <returns>The active selection site, or a null reference (Nothing in Visual Basic) if no selection site is available.</returns>
    </member>
    <member name="E:DriveWorks.Applications.IApplicationSelectionManager.ActiveSiteChanged">
      <summary>Raised when the active selection site changes.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICheckableCommandButton.IsChecked">
      <summary>Gets/sets whether the command button is checked.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ICommand.GetImage(System.Object)">
      <summary>Gets the context-specific image which represents the command.</summary>
      <returns>An image handle representing the image to be shown wherever the command is used in UI elements.</returns>
      <param name="context">The context which would be passed to the command's invoke method.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommand.GetTitle(System.Object)">
      <summary>Gets the context-specific title of the command.</summary>
      <returns>A string containing the localized title of the command.</returns>
      <param name="context">The context which would be passed to the command's invoke method.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommand.Invoke(System.Object)">
      <summary>Invokes the operation represented by the command.</summary>
      <exception caption="" cref="T:DriveWorks.Applications.CommandInvocationException">Thrown when there is any error during invocation.</exception>
      <param name="context">Contextual data required for the operation to proceed.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommand.ValidateContext(System.Object)">
      <summary>Validates the specified context is suitable for the command.</summary>
      <exception caption="" cref="T:DriveWorks.Applications.CommandContextInvalidException">The supplied context is invalid.</exception>
      <param name="context">The context to validate.</param>
    </member>
    <member name="P:DriveWorks.Applications.ICommand.Application">
      <summary>Gets the application to which the command belongs.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommand.IsAvailable">
      <summary>Gets whether the command is available.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommand.IsEnabled">
      <summary>Gets/sets whether the command is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommand.IsValid">
      <summary>Gets whether the command is valid in the current application state.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommand.Manager">
      <summary>Gets the command manager which is managing the command.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommand.Name">
      <summary>Gets the culture invariant name of the command.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommand.StateFilter">
      <summary>Gets the filter which determines in which application states the command is visible.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommand.AfterInvoke">
      <summary>Raised after the command has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommand.BeforeInvoke">
      <summary>Raised when the command is about to be invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommand.Invoking">
      <summary>Raised when the command is being invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommand.IsAvailableChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommand.IsEnabledChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommand.IsValidChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ICommandBarGroup.AddCheckableCommandButton(System.String,System.Object,DriveWorks.Applications.CommandBarDisplayHint,DriveWorks.Applications.CommandUnavailableBehavior)">
      <summary>Adds a new checkable command button to the group.</summary>
      <param name="commandName">The name of the command to invoke when the command button is clicked.</param>
      <param name="commandContext">The context to pass to the command when the command button is clicked.</param>
      <param name="displayHint">The layout hint to be applied by the command bar manager when laying out the command button.</param>
      <param name="unavailableBehavior">The behavior of the command button element when the command is unavailable.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandBarGroup.AddCommandButton(System.String,System.Object,DriveWorks.Applications.CommandBarDisplayHint,DriveWorks.Applications.CommandUnavailableBehavior)">
      <summary>Adds a new command button to the group.</summary>
      <param name="commandName">The name of the command to invoke when the command button is clicked.</param>
      <param name="commandContext">The context to pass to the command when the command button is clicked.</param>
      <param name="displayHint">The layout hint to be applied by the command bar manager when laying out the command button.</param>
      <param name="unavailableBehavior">The behavior of the command button element when the command is unavailable.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandBarGroup.AddVirtualSplitCommandButton(System.String,System.Object,DriveWorks.Applications.CommandBarDisplayHint,DriveWorks.Applications.CommandUnavailableBehavior)">
      <summary>Adds a new split command button, which has virtualized drop down items, to the group.</summary>
      <param name="commandName">The name of the command to invoke when the command button is clicked.</param>
      <param name="commandContext">The context to pass to the command when the command button is clicked.</param>
      <param name="displayHint">The layout hint to be applied by the command bar manager when laying out the command button.</param>
      <param name="unavailableBehavior">The behavior of the command button element when the command is unavailable.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandBarGroup.RemoveCommand(DriveWorks.Applications.ICommand)">
      <summary>Removes the command button from the group.</summary>
      <returns>True if the command button was removed.</returns>
      <param name="command">The command of the button to remove.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandBarManager.AddGroup(System.String,System.String)">
      <summary>Creates a new group which will contain related command buttons.</summary>
      <param name="title">The localized title of the group.</param>
      <param name="linkedViewName">The name of a view to which the group is linked, or a null reference (Nothing in Visual Basic), if the group is always visible.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandButton.ShowContextDialog(System.Windows.Forms.Control)">
      <summary>Shows a contextual dialog next to the button that can be used to take input from the user.</summary>
      <param name="control">The control to show in the contextual dialog.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandButton.ShowContextDialog(System.Windows.UIElement)">
      <summary>Shows a contextual dialog next to the button that can be used to take input from the user.</summary>
      <param name="control">The WPF control to show in the contextual dialog.</param>
    </member>
    <member name="E:DriveWorks.Applications.ICommandButton.Clicked">
      <summary>Raised when the command button is clicked.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ICommandButtonManager.RegisterCheckableCommand(System.String,System.String,System.Drawing.Image,DriveWorks.Applications.CommandBarDisplayHint)">
      <summary>Registers a checkable command with the command manager.</summary>
      <returns>The registered checkable command.</returns>
      <param name="commandName">The culture invariant name of the command.</param>
      <param name="title">The localized title of the command.</param>
      <param name="image">An image handle which provides a UI representation of the command.</param>
      <param name="displayHint">How the button should be displayed on the command bar.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandButtonManager.RegisterCommand(System.String,System.String,System.Drawing.Image,DriveWorks.Applications.CommandBarDisplayHint)">
      <summary>Registers the given command with the command manager.</summary>
      <returns>The registered command.</returns>
      <param name="commandName">The culture invariant name of the command.</param>
      <param name="title">The localized title of the command.</param>
      <param name="image">An image handle which provides a UI representation of the command.</param>
      <param name="displayHint">How the button should be displayed on the command bar.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandButtonManager.RegisterCommandOverride(System.String)">
      <summary>Creates a command override object for the specified command.</summary>
      <returns>A command override object for the specified command, allowing the caller to override the behaviour of the specified command.</returns>
      <param name="commandName">The name of the command for which to get a command override.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandButtonManager.RegisterCommandOverride(System.String,DriveWorks.Applications.CommandBarDisplayHint)">
      <summary>Creates a command override object for the specified command and places it in the command bar.</summary>
      <returns>The command button for the command override.</returns>
      <param name="commandName">The name of the command for which to get a command override.</param>
      <param name="displayHint">How the button should be displayed on the command bar.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandContextHelper.GetImage(System.Object)">
      <summary>Gets the context-specific image which represents the command.</summary>
      <returns>An image handle representing the image to be shown wherever the command is used in UI elements.</returns>
      <param name="context">The context which would be passed to the command's invoke method.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandContextHelper.GetTitle(System.Object)">
      <summary>Gets the context-specific title of the command.</summary>
      <returns>A string containing the localized title of the command.</returns>
      <param name="context">The context which would be passed to the command's invoke method.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandContextHelper.ValidateContext(System.Object)">
      <summary>Validates the specified context is suitable for the command.</summary>
      <exception caption="" cref="T:DriveWorks.Applications.CommandContextInvalidException">The supplied context is invalid.</exception>
      <param name="context">The context to validate.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandManager.GetCommandMonitor(System.String)">
      <summary>Gets the  for the <see cref="T:DriveWorks.Applications.ICommand" /> with the given name.</summary>
      <returns>The  for the command, or a null reference (Nothing in Visual Basic) if a command with the given name has not been
registered on this <see cref="T:DriveWorks.Applications.ICommandManager" />.</returns>
      <param name="commandName">The name of the  whose monitor to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandManager.InvokeCommand(System.String,System.Object)">
      <summary>Invokes the specified command using the given arguments.</summary>
      <returns>True if the command was found and invoked, false if the command was not registered.</returns>
      <param name="commandName">The name of the command to execute.</param>
      <param name="commandContext">The context to be passed to the command, or a null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandManager.UnregisterCommand(DriveWorks.Applications.ICommand)">
      <summary>Unregisters the specified command with the command manager.</summary>
      <returns>True if the command was unregistered.</returns>
      <param name="command">The command to unregister.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandManager.RegisterCommand(System.String,DriveWorks.Applications.StateFilter,System.String,DriveWorks.Applications.ImageHandle,System.Boolean)">
      <summary>Registers the given command with the command manager.</summary>
      <returns>An implementation of the  interface representing the newly registered command.</returns>
      <param name="commandName">The culture invariant name of the command.</param>
      <param name="stateFilter">A filter which describes in which application states the command is available.</param>
      <param name="commandTitle">The localized title of the command.</param>
      <param name="commandImage">An image handle which provides a UI representation of the command.</param>
      <param name="enabled">True if the command is enabled by default, otherwise false.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandManager.RegisterCommand(System.String,DriveWorks.Applications.StateFilter,System.String,DriveWorks.Applications.ImageHandle)">
      <summary>Registers the given command with the command manager.</summary>
      <returns>An implementation of the  interface representing the newly registered command.</returns>
      <param name="commandName">The culture invariant name of the command.</param>
      <param name="stateFilter">A filter which describes in which application states the command is available.</param>
      <param name="commandTitle">The localized title of the command.</param>
      <param name="commandImage">An image handle which provides a UI representation of the command.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandManager.RegisterContextualCommand(System.String,DriveWorks.Applications.StateFilter,DriveWorks.Applications.ICommandContextHelper)">
      <summary>Registers the given contextual command with the command manager.</summary>
      <returns>An implementation of the  interface representing the newly registered command.</returns>
      <param name="commandName">The culture invariant name of the command.</param>
      <param name="stateFilter">A filter which describes in which application states the command is available.</param>
      <param name="contextHelper">A helper object which provides information and validation for commands which support context.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandManager.RegisterContextualCommand(System.String,DriveWorks.Applications.StateFilter,DriveWorks.Applications.ICommandContextHelper,System.Boolean)">
      <summary>Registers the given contextual command with the command manager.</summary>
      <returns>An implementation of the  interface representing the newly registered command.</returns>
      <param name="commandName">The culture invariant name of the command.</param>
      <param name="stateFilter">A filter which describes in which application states the command is available.</param>
      <param name="contextHelper">A helper object which provides information and validation for commands which support context.</param>
      <param name="enabled">True if the command is enabled by default, otherwise false.</param>
    </member>
    <member name="P:DriveWorks.Applications.ICommandManager.Application">
      <summary>Gets the application for which commands are being managed.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ICommandMonitor.GetImage(System.Object)">
      <summary>Gets the context-specific image which represents the command.</summary>
      <returns>An image handle representing the image to be shown wherever the command is used in UI elements.</returns>
      <param name="context">The context which would be passed to the command's invoke method.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandMonitor.GetTitle(System.Object)">
      <summary>Gets the context-specific title of the command.</summary>
      <returns>A string containing the localized title of the command.</returns>
      <param name="context">The context which would be passed to the command's invoke method.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandMonitor.Invoke(System.Object)">
      <summary>Invokes the operation represented by the command.</summary>
      <exception caption="" cref="T:DriveWorks.Applications.CommandInvocationException">Thrown when there is any error during invocation.</exception>
      <param name="context">Contextual data required for the operation to proceed.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandMonitor.ValidateContext(System.Object)">
      <summary>Validates the specified context is suitable for the command.</summary>
      <exception caption="" cref="T:DriveWorks.Applications.CommandContextInvalidException">The supplied context is invalid.</exception>
      <param name="context">The context to validate.</param>
    </member>
    <member name="P:DriveWorks.Applications.ICommandMonitor.Application">
      <summary>Gets the application to which the command belongs.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommandMonitor.IsAvailable">
      <summary>Gets whether the command is available.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommandMonitor.IsEnabled">
      <summary>Gets whether the command is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommandMonitor.IsValid">
      <summary>Gets whether the command is valid in the current application state.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommandMonitor.Manager">
      <summary>Gets the command manager which is managing the command.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommandMonitor.Name">
      <summary>Gets the culture invariant name of the command.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommandMonitor.StateFilter">
      <summary>Gets the filter which determines in which application states the command is visible.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommandMonitor.AfterInvoke">
      <summary>Raised after the command has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommandMonitor.BeforeInvoke">
      <summary>Raised when the command is about to be invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommandMonitor.Invoking">
      <summary>Raised when the command is being invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommandMonitor.IsAvailableChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommandMonitor.IsEnabledChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommandMonitor.IsValidChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommandOverride.CommandName">
      <summary>Gets the name of the command overridden by the command override.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ICommandOverride.IsEnabled">
      <summary>Gets/sets whether the command is enabled.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ICommandOverride.Invoking">
      <summary>Raised when the command is being invoked.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ICommandOverrideService.CreateOverride(System.String)">
      <summary>Creates a command override object for the specified command.</summary>
      <returns>A command override object for the specified command, allowing the caller to override the behavior of the specified command.</returns>
      <param name="commandName">The name of the command for which to get a command override.</param>
    </member>
    <member name="M:DriveWorks.Applications.ICommandOverrideService.RemoveOverride(DriveWorks.Applications.ICommandOverride)">
      <summary>Removes the specified command override.</summary>
      <returns>True if the override was removed.</returns>
      <param name="commandOverride">The command override to remove.</param>
    </member>
    <member name="P:DriveWorks.Applications.IDialogPreferences.IsSizeable">
      <summary>Indicates whether the host should allow the content to be resized.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IEvent.Raised">
      <summary>The target event was raised.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IExceptionHandler.HandleException(System.Exception)">
      <summary>Handles the specified exception and returns true if it was handled.</summary>
      <returns>True if the exception was handled and can be safely ignored, false to rethrow it.</returns>
      <param name="ex">The exception.</param>
    </member>
    <member name="M:DriveWorks.Applications.IExceptionHandler.HandleException(System.Exception,System.String)">
      <summary>Handles the specified exception and returns true if it was handled.</summary>
      <returns>True if the exception was handled and can be safely ignored, false to rethrow it.</returns>
      <param name="ex">The exception.</param>
      <param name="source">The source of the exception.</param>
    </member>
    <member name="M:DriveWorks.Applications.IGroupCredentialsProvider.QueryUserForGroupCredentials(DriveWorks.Applications.GroupCredentialsRequestContext)">
      <summary>Requests credentials from the user to be used to log on to the group.</summary>
      <returns>A credentials object which can be passed to the Group open method to log on to the group.</returns>
      <param name="context">Information about the credentials request.</param>
    </member>
    <member name="M:DriveWorks.Applications.IGroupCredentialsProvider.SaveToRecent(DriveWorks.Applications.GroupCredentialsRequestContext,DriveWorks.Group,DriveWorks.Security.IProviderCredentials)">
      <summary>Called after a successful logon to save the group to the recent list, including credentials if the user requested it.</summary>
      <param name="context">The contextual information about the credential request.</param>
      <param name="group">The authenticated group.</param>
      <param name="credentials">The credentials that were returned by a call to
.</param>
    </member>
    <member name="M:DriveWorks.Applications.IGroupService.CloseGroup">
      <summary>Closes the specified group.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The implementation does not support groups being closed by 3rd party code.</exception>
    </member>
    <member name="M:DriveWorks.Applications.IGroupService.OpenGroup(System.String,DriveWorks.Security.IProviderCredentials)">
      <summary>Opens the specified group with the given credentials.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The implementation does not support groups being opened by 3rd party code.</exception>
      <param name="groupConnectionString">The connection string which describes the group to which to connect.</param>
      <param name="groupCredentials">The credentials to use to connect to the group, or a null rereference to prompt the user for credentials if the implementation supports it.</param>
    </member>
    <member name="M:DriveWorks.Applications.IGroupService.TryOpenGroup(System.String,DriveWorks.Security.IProviderCredentials)">
      <summary>Tries to open the specified group with the given credentials.</summary>
      <returns>True if the group was successfully opened, otherwise false.</returns>
      <param name="groupConnectionString">The connection string which describes the group to which to connect.</param>
      <param name="groupCredentials">The credentials to use to connect to the group, or a null reference to prompt the user for credentials if the implementation supports it.</param>
    </member>
    <member name="P:DriveWorks.Applications.IGroupService.ActiveGroup">
      <summary>Gets the active group.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IGroupService.SupportsCloseGroup">
      <summary>Gets a boolean indicating whether the implementation supports groups being closed by 3rd party code.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IGroupService.SupportsOpenGroup">
      <summary>Gets a boolean indicating whether the implementation supports groups being opened by 3rd party code.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IGroupService.GroupClosed">
      <summary>Raised when the active group is closed.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IGroupService.GroupClosing">
      <summary>Raised when the active group is about to be closed.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IGroupService.GroupOpened">
      <summary>Raised when a group is opened.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IGroupService.GroupOpening">
      <summary>Raised when a group is about to be opened.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IHasChildren.Children">
      <summary>Gets a collection of child objects for this object.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IHasCommand.Command">
      <summary>Gets the command associated with the object.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IHasCommand.CommandContext">
      <summary>Gets the contextual data which should be passed to the command.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IHasCommands.InitializeCommands(DriveWorks.Applications.ICommandButtonManager)">
      <summary>Called during initialization, to provide the object with the current command manager.</summary>
      <param name="commandManager">The current command manager that can be used to control what commands are available while this object is visible.</param>
    </member>
    <member name="M:DriveWorks.Applications.IHasHelp.DisplayHelp">
      <summary>Displays help information.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IHasItemCommands.Commands">
      <summary>Gets a collection of item commands for this object.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IHasState.State">
      <summary>Gets the individual states which make up current state of the object.</summary>
      <returns>An array of globally unique identifiers each of which represents a state, well-known application states are defined in
.</returns>
    </member>
    <member name="E:DriveWorks.Applications.IHasState.StateChanged">
      <summary>Raised when the current state of the object changes.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IHasState.StateChanging">
      <summary>Raised when the current state of the object is about to change.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IHasValidation.IsValid">
      <summary>Indicates whether the object is in a valid state.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IHasValidation.IsValidChanged">
      <summary>Fires when the value of the  property changes.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IHelpService.ShowHelpTopic(System.String)">
      <summary>Shows the help topic with the given name.</summary>
      <param name="topicName">The full name of the help topic to show.</param>
    </member>
    <member name="M:DriveWorks.Applications.IInteraction.QueryUser(System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.DialogResult)">
      <summary>Asks the user to provide a response to a prompt.</summary>
      <returns>The response chosen by the user.</returns>
      <param name="question">The question to ask the user.</param>
      <param name="icon">The icon shown in the message box.</param>
      <param name="buttons">The buttons to show in the message box.</param>
      <param name="defaultButton">The button to set as the default in the message box.</param>
      <param name="defaultResponse">The default response to return if the application is running non-interactively.</param>
    </member>
    <member name="M:DriveWorks.Applications.IInteraction.QueryUser(System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.DialogResult,System.String)">
      <summary>Asks the user to provide a response to a prompt.</summary>
      <returns>The response chosen by the user.</returns>
      <param name="question">The question to ask the user.</param>
      <param name="icon">The icon shown in the message box.</param>
      <param name="buttons">The buttons to show in the message box.</param>
      <param name="defaultButton">The button to set as the default in the message box.</param>
      <param name="defaultResponse">The default response to return if the application is running non-interactively.</param>
      <param name="helpTopic">A help topic to be shown if the user requests help.</param>
    </member>
    <member name="M:DriveWorks.Applications.IInteraction.SendMessageToUser(System.String,System.Windows.Forms.MessageBoxIcon)">
      <summary>Sends a message to the user of the application.</summary>
      <param name="message">The message to send.</param>
      <param name="icon">The icon shown in the message box.</param>
    </member>
    <member name="M:DriveWorks.Applications.IInteraction.SendMessageToUser(System.String,System.Windows.Forms.MessageBoxIcon,System.String)">
      <summary>Sends a message to the user of the application.</summary>
      <param name="message">The message to send.</param>
      <param name="icon">The icon shown in the message box.</param>
      <param name="helpTopic">A help topic to be shown if the user requests help.</param>
    </member>
    <member name="P:DriveWorks.Applications.IInteraction.IsInteractive">
      <summary>Gets a value indicating whether the application is capable of interaction with a user.</summary>
      <returns>True if the application is running in an interactive environment, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Applications.IInteraction.IsUserInteractionDisabled">
      <summary>Gets/sets whether the application is allowed to show modal UI elements.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The application does not support enabling/disabling interaction.Thrown when the property is set to true, but the application is not interactive (see %P:DriveWorks.Applications.IInteraction.IsInteractive% for more information).</exception>
    </member>
    <member name="M:DriveWorks.Applications.IKeyboardShortcutService.GetAssignedCommandName(System.Windows.Forms.Keys)">
      <summary>Gets the name of the command assigned to the given key combination.</summary>
      <returns>The name of the command assigned to the given key combination, or a null reference of no assignment is registered.</returns>
      <param name="keys">The key combination to check.</param>
    </member>
    <member name="M:DriveWorks.Applications.IKeyboardShortcutService.InvokeShortcut(System.Windows.Forms.Keys)">
      <summary>Invokes whatever action is associated with the given shortcut keys.</summary>
      <returns>True if an action is associated with the given shortcut keys and executed.</returns>
      <param name="keys">The shortcut keys that were pressed.</param>
    </member>
    <member name="M:DriveWorks.Applications.IKeyboardShortcutService.RegisterShortcut(System.Windows.Forms.Keys,System.String)">
      <summary>Registers the given keyboard shortcut with the given command.</summary>
      <param name="keys">The keys that, when pressed, will invoke the given command.</param>
      <param name="commandName">The name of the command to executed when the keyboard shortcut is pressed.</param>
    </member>
    <member name="E:DriveWorks.Applications.INotifyExceptionThrown.ExceptionThrown">
      <summary>Raised whenever there is an uncatchable exception thrown.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IPendingChangesService.TryPromptAndApplyChanges(System.Boolean)">
      <summary>If there are pending changes, a message will be displayed to the user asking if they want to apply them, then apply changes if they wish to.</summary>
      <returns>The result of the prompt and apply dialog, result is None if there were no changes.</returns>
    </member>
    <member name="E:DriveWorks.Applications.IPendingChangesService.Evaluating">
      <summary>Raised when pending changes are being checked. use this event to register unsaved changes and their applicators.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IPreviewControl.Clear">
      <summary>Clears the current scene from the control.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IPreviewControl.SetDefaultRotationZoom(DriveWorks.Support.RotationZoom)">
      <summary>Sets the default rotation and zoom of the preview control.</summary>
      <param name="defaultRotationZoom">The default rotation and zoom.</param>
    </member>
    <member name="M:DriveWorks.Applications.IPreviewControl.SetEngineControl(DriveWorks.Forms.PreviewControl)">
      <summary>Sets the engine level control on the PreviewControl.</summary>
      <param name="control">The DriveWorks engine control.</param>
    </member>
    <member name="M:DriveWorks.Applications.IPreviewControl.SetImageMode(System.Boolean)">
      <summary>Sets image mode on the control</summary>
      <param name="isImageModeEnabled">Whether we are in image mode or not.</param>
    </member>
    <member name="M:DriveWorks.Applications.IPreviewControl.SetLighting(System.String)">
      <summary>Sets the Lighting preset to load.</summary>
      <param name="presetName">The name of the lighting preset to use.</param>
    </member>
    <member name="M:DriveWorks.Applications.IPreviewControl.SetMenuEnabled(System.Boolean)">
      <summary>Sets the visibility of the preview control menu.</summary>
      <param name="isEnabled">Whether or not the control is visible.</param>
    </member>
    <member name="M:DriveWorks.Applications.IPreviewControl.SetPreview(System.IDisposable)">
      <summary>Gives the previewer a preview object to render.</summary>
      <param name="preview">The preview object to render.</param>
    </member>
    <member name="P:DriveWorks.Applications.IPreviewControl.IsInstantModeEnabled">
      <summary>Disables animation and ensures that manual previews auto display.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IPreviewControl.FrameRendered">
      <summary>Raised whenever an image of the preview has finished displaying in the control.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IProjectService.CloseProject">
      <summary>Closes the active project without saving it.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The implementation does not support projects being closed by 3rd party code.</exception>
    </member>
    <member name="M:DriveWorks.Applications.IProjectService.CreateProject(DriveWorks.Group,System.String,System.String)">
      <summary>Creates a new project.</summary>
      <param name="group">The group in which to create the project.</param>
      <param name="path">The fully qualified path to the new project file.</param>
      <param name="additionalParameters">Optional additional parameters to pass to the project being created.</param>
    </member>
    <member name="M:DriveWorks.Applications.IProjectService.OpenProject(System.String)">
      <summary>Opens the specified project.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The implementation does not support projects being opened by 3rd party code.</exception>
      <param name="projectName">The name of the project to open.</param>
    </member>
    <member name="P:DriveWorks.Applications.IProjectService.ActiveProject">
      <summary>Gets the active project.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IProjectService.HasChanges">
      <summary>Gets/set if the current project has any changes that have not been saved.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IProjectService.SupportsCloseProject">
      <summary>Gets a boolean indicating whether the implementation supports projects being closed by 3rd party code.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IProjectService.SupportsCreateProject">
      <summary>Gets a boolean indicating whether the implementation supports projects being created by 3rd party code.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IProjectService.SupportsOpenProject">
      <summary>Gets a boolean indicating whether the implementation supports projects being opened by 3rd party code.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IProjectService.ProjectClosed">
      <summary>Raised when the active project is closed.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IProjectService.ProjectClosing">
      <summary>Raised when the active project is about to be closed.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IProjectService.ProjectOpened">
      <summary>Raised when a project has been opened.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IProjectService.ProjectOpening">
      <summary>Raised when a project is about to be opened.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IQuickBarManager.AddCommandButton(System.String,System.Object,DriveWorks.Applications.CommandUnavailableBehavior)">
      <summary>Adds a new command button to the group.</summary>
      <param name="commandName">The name of the command to invoke when the command button is clicked.</param>
      <param name="commandContext">The context to pass to the command when the command button is clicked.</param>
      <param name="unavailableBehavior">The behavior of the command button element when the command is unavailable.</param>
    </member>
    <member name="M:DriveWorks.Applications.IQuickBarManager.AddVirtualSplitCommandButton(System.String,System.Object,DriveWorks.Applications.CommandUnavailableBehavior)">
      <summary>Adds a new split command button, which has virtualized drop down items, to the group.</summary>
      <param name="commandName">The name of the command to invoke when the command button is clicked.</param>
      <param name="commandContext">The context to pass to the command when the command button is clicked.</param>
      <param name="unavailableBehavior">The behavior of the command button element when the command is unavailable.</param>
    </member>
    <member name="M:DriveWorks.Applications.IRefreshable.Refresh">
      <summary>Refreshes the data in the view.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IRequiresApplication.Initialize(DriveWorks.Applications.IApplication)">
      <summary>Initializes the object.</summary>
      <param name="application">The hosting application</param>
    </member>
    <member name="P:DriveWorks.Applications.ISelectionSite.SelectedItems">
      <summary>Gets the selection.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ISelectionSite.SelectedItemsChanged">
      <summary>Raised when the selected items property has been changed.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IServiceFactory.CreateService(System.Type)">
      <summary>When implemented in a derived class, creates an instance of an object implementing the specified service type.</summary>
      <returns>An instance of an object implementing the specified service, or a null reference (Nothing in Visual Basic) if the specified type is not supported.</returns>
      <param name="type">The type representing the service to create.</param>
    </member>
    <member name="M:DriveWorks.Applications.IServiceManager.GetService``1">
      <summary>Gets the service object of the specified type.</summary>
      <returns>A service object of the specified type, or a null reference (Nothing in Visual Basic) if no matching service exists.</returns>
      <typeparam name="T">The type of service object to get</typeparam>
    </member>
    <member name="M:DriveWorks.Applications.IServiceManager.RegisterService(System.Type,System.Object)">
      <summary>Registers the specified service object with the specified service type.</summary>
      <returns>True if the service is registered successfully, false if the specified service type is already registered.</returns>
      <param name="serviceType">The type of service the service object implements.</param>
      <param name="serviceObj">The object implementing the service type specified in <paramref name="serviceType" />, or an object implementing the  interface, or a
<see cref="T:DriveWorks.Applications.CreateServiceObjectHandler" /> delegate.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.DeleteSetting(DriveWorks.Applications.SettingLevel,System.String,System.Boolean)">
      <summary>Deletes the specified setting.</summary>
      <param name="level">The level at which to delete the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.DeleteSettingGroup(DriveWorks.Applications.SettingLevel,System.String,System.Boolean)">
      <summary>Deletes the specified setting group.</summary>
      <param name="level">The level at which to delete the setting group.</param>
      <param name="groupName">The full name of the setting group.</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.GetSetting(DriveWorks.Applications.SettingLevel,System.String,System.Boolean)">
      <summary>Gets the specified setting.</summary>
      <returns>A null reference (Nothing in Visual Basic) if the setting doesn't exist, otherwise the value of the setting.</returns>
      <param name="level">The level from which to load the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.GetSettingAsByteArray(DriveWorks.Applications.SettingLevel,System.String,System.Boolean)">
      <summary>Gets the specified setting as a byte array.</summary>
      <returns>A null reference (Nothing in Visual Basic) if the setting doesn't exist, otherwise the value of the setting.</returns>
      <param name="level">The level from which to load the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.GetSettingAsString(DriveWorks.Applications.SettingLevel,System.String,System.Boolean)">
      <summary>Gets the specified setting as a string.</summary>
      <returns>A null reference (Nothing in Visual Basic) if the setting doesn't exist, otherwise the value of the setting.</returns>
      <param name="level">The level from which to load the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.GetSettingAsStringArray(DriveWorks.Applications.SettingLevel,System.String,System.Boolean)">
      <summary>Gets the specified setting as a string array.</summary>
      <returns>A null reference (Nothing in Visual Basic) if the setting doesn't exist, otherwise the value of the setting.</returns>
      <param name="level">The level from which to load the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.RequestElevation">
      <summary>Requests elevation if supported.</summary>
      <returns>True if the request for elevation successfully results in elevation, otherwise false.</returns>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.TryGetSettingAsBoolean(DriveWorks.Applications.SettingLevel,System.String,System.Boolean,System.Boolean@)">
      <summary>Gets the specified setting as a boolean.</summary>
      <returns>True if the setting was retrieved, otherwise false.</returns>
      <param name="level">The level from which to load the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
      <param name="value">Receives the value of the setting.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.TryGetSettingAsInteger(DriveWorks.Applications.SettingLevel,System.String,System.Boolean,System.Int32@)">
      <summary>Gets the specified setting as a boolean.</summary>
      <returns>True if the setting was retrieved, otherwise false.</returns>
      <param name="level">The level from which to load the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
      <param name="value">Receives the value of the setting.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.SetSetting(DriveWorks.Applications.SettingLevel,System.String,System.String,System.Boolean)">
      <summary>Saves the specified setting.</summary>
      <param name="level">The level at which to save the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="settingValue">The value to save.</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.SetSetting(DriveWorks.Applications.SettingLevel,System.String,System.String[],System.Boolean)">
      <summary>Saves the specified setting.</summary>
      <param name="level">The level at which to save the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="settingValue">The value to save.</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.SetSetting(DriveWorks.Applications.SettingLevel,System.String,System.Int32,System.Boolean)">
      <summary>Saves the specified setting.</summary>
      <param name="level">The level at which to save the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="settingValue">The value to save.</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.SetSetting(DriveWorks.Applications.SettingLevel,System.String,System.Boolean,System.Boolean)">
      <summary>Saves the specified setting.</summary>
      <param name="level">The level at which to save the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="settingValue">The value to save.</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISettingsManager.SetSetting(DriveWorks.Applications.SettingLevel,System.String,System.Byte[],System.Boolean)">
      <summary>Saves the specified setting.</summary>
      <param name="level">The level at which to save the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="settingValue">The value to save.</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="P:DriveWorks.Applications.ISettingsManager.CanRequestElevation">
      <summary>Returns true if the settings manager is capable of requesting elevation for access to privileged settings.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISettingsManager.IsPrivileged">
      <summary>Gets whether the settings manager has access to settings stored in privileged locations such as HKEY_LOCAL_MACHINE.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISettingsManager.IsRedirectionEnabled">
      <summary>Gets/sets whether machine-level settings are redirected to the user-profile instead.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISettingsManager.LocalUserContentFolder">
      <summary>Gets the fully-qualified path to the local user content folder.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISettingsManager.MachineContentFolder">
      <summary>Gets the fully-qualified path to the machine content folder.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISettingsManager.RoamingUserContentFolder">
      <summary>Gets the fully-qualified path to the roaming user content folder.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISettingsManager.SharedContentFolder">
      <summary>Gets/sets the fully-qualified path to the shared content folder.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ISettingsManager.Elevated">
      <summary>Raised when the settings manager has been elevated.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ISettingsManager.SettingValueChanged">
      <summary>Raised when the value of a setting changes.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ISpecificationFactory.CreateSpecificationContext(DriveWorks.Specification.SpecificationEnvironment)">
      <summary>Creates a new specification context using the given settings.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">One or more mandatory arguments were omitted.The specified group belongs to a different host.</exception>
      <returns>A specification context which represents the specification.</returns>
      <param name="environment">The settings which control the execution environment of the specification.</param>
    </member>
    <member name="M:DriveWorks.Applications.ISpecificationFactory.CreateSpecificationEnvironment">
      <summary>Creates the default specification environment for the application.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISpecificationRequestWithEdit.OperationName">
      <summary>Gets/sets the name of the operation to run.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISpecificationRequestWithEdit.SpecificationId">
      <summary>Gets/sets the id of the specification to edit.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ISpecificationRequestWithEdit.SpecificationName">
      <summary>Gets/sets the name of the specification to edit.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ISpecificationRequestWithEdit.OperationFailed">
      <summary>Occurs when the specification is being edited and a operation with the given name is invalid.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ISpecificationRequestWithEdit.SpecificationIdInvalid">
      <summary>Occurs when the specification is being edited and a specification with the given name can't be located.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ISpecificationRequestWithEdit.SpecificationNameInvalid">
      <summary>Occurs when the specification is being edited and a specification with the given name can't be located.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ISpecificationService.SpecificationContextCreated">
      <summary>Raised when a specification context is created.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IStatusBarService.SetReadyState(System.String)">
      <summary>Sets the caption displayed in the ready state panel of the status bar.</summary>
      <param name="newReadyState">The ready state to apply, or a null reference to reset the ready state to ready.</param>
    </member>
    <member name="P:DriveWorks.Applications.IStatusBarService.ReadyState">
      <summary>Gets the current ready state set on the status bar.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ITransactionManager.ClearAllHistory">
      <summary>Clears the transaction history of all views.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ITransactionManager.ClearHistory">
      <summary>Clears the transaction history.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ITransactionManager.Redo">
      <summary>Redoes the last transaction in the redo chain.</summary>
      <returns>True if there was a transaction in the redo chain, otherwise false.</returns>
    </member>
    <member name="M:DriveWorks.Applications.ITransactionManager.RegisterTransaction(DriveWorks.Transactions.ITransaction,System.Boolean)">
      <summary>Register's a transaction with the transaction manager's undo chain.</summary>
      <param name="transaction">The transaction to register.</param>
      <param name="requiresCommit">True if the commit method on the transaction should be called after the transaction has been registered, if the transaction has already taken place then false
should be passed.</param>
    </member>
    <member name="M:DriveWorks.Applications.ITransactionManager.Undo">
      <summary>Undoes the last transaction in the undo chain.</summary>
      <returns>True if there was a transaction in the undo chain, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Applications.ITransactionManager.CanRedo">
      <summary>Gets a value indicating whether there are any transactions in the redo chain.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ITransactionManager.CanUndo">
      <summary>Gets a value indicating whether there are any transactions in the undo chain.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ITransactionManager.UndoRedoEnabled">
      <summary>Gets or sets whether or not the user can use the undo and redo buttons.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ITransactionManager.TransactionCommitted">
      <summary>Raised when a transaction is committed.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ITransactionManager.TransactionExecuting">
      <summary>Raised before an historical transaction is executed.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ITransactionManager.TransactionHistoryCleared">
      <summary>Raised after the transaction history has been cleared.</summary>
    </member>
    <member name="E:DriveWorks.Applications.ITransactionManager.TransactionRolledBack">
      <summary>Raised when a transaction is rolled back.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IUpdateable.ResumeUpdates">
      <summary>Resumes updates.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IUpdateable.SuppressUpdate">
      <summary>Suppresses updates.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IUserMessageService.BeginIgnore">
      <summary>Ignores any received user messages.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IUserMessageService.EndIgnore">
      <summary>Stops ignoring received user messages.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IUserMessageService.UserMessage">
      <summary>Raised when a new user message is received.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IView.Initialize(DriveWorks.Applications.IViewEnvironment)">
      <summary>Initializes the view.</summary>
      <param name="environment">The view's environment.</param>
    </member>
    <member name="P:DriveWorks.Applications.IView.SelectionSite">
      <summary>Gets the selection site for the view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IView.Title">
      <summary>Gets the title of the view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IView.ViewEnvironment">
      <summary>Gets environment information about the view.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IViewCommandBarManager.AddGroup(System.String)">
      <summary>Creates a new group which will contain related command buttons.</summary>
      <param name="title">The localized title of the group.</param>
    </member>
    <member name="P:DriveWorks.Applications.IViewEnvironment.Application">
      <summary>Gets the application which is hosting the view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewEnvironment.ApplicationModule">
      <summary>Gets the application module which registered the view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewEnvironment.CommandBarManager">
      <summary>Gets the view's command bar manager</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewEnvironment.CommandManager">
      <summary>Gets the view's local command manager</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewEnvironment.CommandOverrideService">
      <summary>Gets the view's command override service allowing it to override the standard implementations of commands.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewEnvironment.TransactionGroupName">
      <summary>Gets/sets the name used to group related transactions.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewEnvironment.ViewName">
      <summary>Gets the name of the view used when the view was registered.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewEnvironment.ViewTitle">
      <summary>Gets the title of the view as it was registered.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IViewEnvironment.ViewActivating">
      <summary>The event raised when the view is activating.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IViewEnvironment.ViewDeactivating">
      <summary>The event raised when the view is deactivating.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IViewManager.ActivateView(System.String)">
      <summary>Sets the currently active view control</summary>
      <returns>True if the view was successfully activated, otherwise false.</returns>
      <param name="viewName">The name of the view to activate.</param>
    </member>
    <member name="M:DriveWorks.Applications.IViewManager.GetViewByName(System.String,System.Boolean)">
      <summary>Gets the named view.</summary>
      <returns>The named view, or a null reference (Nothing in Visual Basic) if the view is not registered, or hasn't been activated at least once.</returns>
      <param name="viewName">The name of the view to get.</param>
      <param name="create">True to create the view if it has not been activated at least once, otherwise false to return a null reference (Nothing in Visual Basic) if the view has not
been activated at least once.</param>
    </member>
    <member name="P:DriveWorks.Applications.IViewManager.ActiveView">
      <summary>Gets the active view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewManager.ActiveViewName">
      <summary>Gets the active view's name.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewManager.ActiveViewTransactionGroupName">
      <summary>Gets the name of the transaction group for the active transaction.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IViewManager.IsEnabled">
      <summary>Gets or sets a value indicating whether the view manager UI is enabled.</summary>
      <returns>True if the view manager UI is enabled, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Applications.IViewManager.IsFullScreen">
      <summary>Gets a boolean indicating whether the active view is in full-screen mode.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IViewManager.ActiveViewChanged">
      <summary>Raised when the active view changes.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IViewManager.IsEnabledChanged">
      <summary>Raised when the view is enabled/disabled.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IViewRegistrationService.InsertControlViewAfter(System.String,System.String,System.String,System.String,System.String,DriveWorks.Applications.StateFilter,System.Type)">
      <summary>Inserts a new view after an existing view.</summary>
      <param name="afterViewName">The name of the view after which to insert the view, or a null reference (Nothing in Visual Basic) to place the view at the end of the views at the current
level.</param>
      <param name="name">The culture-invariant name of the view.</param>
      <param name="title">The localized title of the view.</param>
      <param name="parent">The culture-invariant name of the parent view (see remarks).</param>
      <param name="imageName">The name of an image shown in the view manager UI.</param>
      <param name="stateFilter">A filter which describes which application states the view is included in and/or excluded from.</param>
      <param name="viewControlType">The CLR type of a WinForms control or WPF UI element that provides the UI for the view.</param>
    </member>
    <member name="M:DriveWorks.Applications.IViewRegistrationService.InsertControlViewBefore(System.String,System.String,System.String,System.String,System.String,DriveWorks.Applications.StateFilter,System.Type)">
      <summary>Inserts a new view before an existing view.</summary>
      <param name="beforeViewName">The name of the view before which to insert the view, or a null reference (Nothing in Visual Basic) to place the view at the beginning of the views at the
current level.</param>
      <param name="name">The culture-invariant name of the view.</param>
      <param name="title">The localized title of the view.</param>
      <param name="parent">The culture-invariant name of the parent view (see remarks).</param>
      <param name="imageName">The name of an image shown in the view manager UI.</param>
      <param name="stateFilter">A filter which describes which application states the view is included in and/or excluded from.</param>
      <param name="viewControlType">The CLR type of a WinForms control or WPF UI element that provides the UI for the view.</param>
    </member>
    <member name="M:DriveWorks.Applications.IViewRegistrationService.InsertHtmlViewAfter(System.String,System.String,System.String,System.String,System.String,DriveWorks.Applications.StateFilter,System.String)">
      <summary>Inserts a new view after an existing view.</summary>
      <param name="afterViewName">The name of the view after which to insert the view, or a null reference (Nothing in Visual Basic) to place the view at the end of the views at the current
level.</param>
      <param name="name">The culture-invariant name of the view.</param>
      <param name="title">The localized title of the view.</param>
      <param name="parent">The culture-invariant name of the parent view (see remarks).</param>
      <param name="imageName">The name of an image shown in the view manager UI.</param>
      <param name="stateFilter">A filter which describes which application states the view is included in and/or excluded from.</param>
      <param name="htmlPath">A URI which identifies the HTML file to load.</param>
    </member>
    <member name="M:DriveWorks.Applications.IViewRegistrationService.InsertHtmlViewBefore(System.String,System.String,System.String,System.String,System.String,DriveWorks.Applications.StateFilter,System.String)">
      <summary>Inserts a new view before an existing view.</summary>
      <param name="beforeViewName">The name of the view before which to insert the view, or a null reference (Nothing in Visual Basic) to place the view at the beginning of the views at the
current level.</param>
      <param name="name">The culture-invariant name of the view.</param>
      <param name="title">The localized title of the view.</param>
      <param name="parent">The culture-invariant name of the parent view (see remarks).</param>
      <param name="imageName">The name of an image shown in the view manager UI.</param>
      <param name="stateFilter">A filter which describes which application states the view is included in and/or excluded from.</param>
      <param name="htmlPath">A URI which identifies the HTML file to load.</param>
    </member>
    <member name="E:DriveWorks.Applications.IVirtualSplitCommandButton.DropDownOpening">
      <summary>Raised when the drop down is opening.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IVirtualSplitCommandButton.VirtualItemDeleted">
      <summary>Raised after the user presses the delete key on a virtual item on the drop down list.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IVirtualSplitCommandButton.VirtualItemDeleting">
      <summary>Raised when the user presses the delete key on a virtual item on the drop down list.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IVirtualSplitCommandButton.VirtualItemSelected">
      <summary>Raised when a virtual item on the drop down list is clicked.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IWizard.Cancel">
      <summary>Cancels the wizard.</summary>
      <returns>True if the operation was successful, false to remain on the current step.</returns>
    </member>
    <member name="M:DriveWorks.Applications.IWizard.Finish">
      <summary>Finishes the wizard.</summary>
      <returns>True if the operation was successful, false to remain on the current step.</returns>
    </member>
    <member name="M:DriveWorks.Applications.IWizard.Next">
      <summary>Navigates to the next step.</summary>
      <returns>True if the operation was successful, false to remain on the current step.</returns>
    </member>
    <member name="M:DriveWorks.Applications.IWizard.Previous">
      <summary>Navigates to the previous step.</summary>
      <returns>True if the operation was successful, false to remain on the current step.</returns>
    </member>
    <member name="M:DriveWorks.Applications.IWizard.ShowHelp">
      <summary>Shows the help for the wizard.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.ActiveStep">
      <summary>Gets the Windows Forms control representing the active step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.ActiveStepDescription">
      <summary>Gets the description of the active step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.ActiveStepImage">
      <summary>Gets the image which represents the active step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.ActiveStepTitle">
      <summary>Gets the title of the active step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.IsCancelEnabled">
      <summary>Gets whether the Cancel button is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.IsFinishEnabled">
      <summary>Gets whether the Finish button is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.IsHelpEnabled">
      <summary>Gets whether help is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.IsNextEnabled">
      <summary>Gets whether the Next button is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.IsPreviousEnabled">
      <summary>Gets whether the Previous button is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizard.WizardTitle">
      <summary>Gets the title of the wizard.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.CancelInvoked">
      <summary>Raised by the wizard when the cancel action has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.CancelInvoking">
      <summary>Raised by the wizard when the cancel action is being invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.FinishInvoked">
      <summary>Raised by the wizard when the finish action has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.FinishInvoking">
      <summary>Raised by the wizard when the finish action is being invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.Navigated">
      <summary>Raised by the wizard when some action on the active step has changed the navigation, e.g. if validation has determined the user can no longer select Next, or
if the wizard wants to manually switch to another step.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.NextInvoked">
      <summary>Raised by the wizard when the next action has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.NextInvoking">
      <summary>Raised by the wizard when the next action is being invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.PreviousInvoked">
      <summary>Raised by the wizard when the previous action has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Applications.IWizard.PreviousInvoking">
      <summary>Raised by the wizard when the previous action is being invoked.</summary>
    </member>
    <member name="M:DriveWorks.Applications.IWizardService.ShowWizard(DriveWorks.Applications.IWizard)">
      <summary>Runs a wizard.</summary>
      <param name="wizard">The wizard to run.</param>
    </member>
    <member name="P:DriveWorks.Applications.IWizardStep.Description">
      <summary>Gets the description of the step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizardStep.Image">
      <summary>Gets the image which represents the step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.IWizardStep.Title">
      <summary>Gets the title of the step.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ApplicationEventType">
      <summary>Represents the type of an application event.</summary>
    </member>
    <member name="F:DriveWorks.Applications.ApplicationEventType.Information">
      <summary>The event is informational.</summary>
    </member>
    <member name="F:DriveWorks.Applications.ApplicationEventType.Success">
      <summary>The event represents a successful action.</summary>
    </member>
    <member name="F:DriveWorks.Applications.ApplicationEventType.Warning">
      <summary>The event is a warning.</summary>
    </member>
    <member name="F:DriveWorks.Applications.ApplicationEventType.Error">
      <summary>The event represents a failed action.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandBarDisplayHint">
      <summary>Hints to be applied by the command bar layout logic when laying out elements.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandUnavailableBehavior">
      <summary>Indicates the behavior of UI elements which invoke a command which is not available in the current application state.</summary>
    </member>
    <member name="F:DriveWorks.Applications.CommandUnavailableBehavior.Hide">
      <summary>Hides UI elements which invoke the command when it is not available.</summary>
    </member>
    <member name="F:DriveWorks.Applications.CommandUnavailableBehavior.Disable">
      <summary>Disables UI elements which invoke the command when it is not available.</summary>
    </member>
    <member name="T:DriveWorks.Applications.PromptAndApplyChangesResult">
      <summary>Stores the result of a call to TryPromptAndApplyChanges of IPendingChangesService.</summary>
    </member>
    <member name="F:DriveWorks.Applications.PromptAndApplyChangesResult.NoChanges">
      <summary>No changes have been made to the project and so the user was never prompted.</summary>
    </member>
    <member name="F:DriveWorks.Applications.PromptAndApplyChangesResult.Yes">
      <summary>The changes were applied.</summary>
    </member>
    <member name="F:DriveWorks.Applications.PromptAndApplyChangesResult.No">
      <summary>The changes were not applied.</summary>
    </member>
    <member name="F:DriveWorks.Applications.PromptAndApplyChangesResult.Cancel">
      <summary>The process has been cancelled.</summary>
    </member>
    <member name="T:DriveWorks.Applications.SettingLevel">
      <summary>Represents the level at which a setting is stored.</summary>
    </member>
    <member name="F:DriveWorks.Applications.SettingLevel.Machine">
      <summary>The setting is stored at the machine level.</summary>
    </member>
    <member name="F:DriveWorks.Applications.SettingLevel.User">
      <summary>The setting is stored at the user level.</summary>
    </member>
    <member name="T:DriveWorks.Applications.SettingsPagePosition">
      <summary>Specifies the position of a settings page relative to another.</summary>
    </member>
    <member name="F:DriveWorks.Applications.SettingsPagePosition.After">
      <summary>The settings page is after another specified settings page.</summary>
    </member>
    <member name="F:DriveWorks.Applications.SettingsPagePosition.Before">
      <summary>The settings page is before another specified settings page.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ApplicationEventEventArgs">
      <summary>Provides the event data for the  event.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandContextInvalidException">
      <summary>Thrown when the context passed to a command is not valid for the type of command.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandInvocationException">
      <summary>Thrown when there was an exception during command invocation.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandInvokeEventArgs">
      <summary>Provides the event data for the various invocation events on the  type.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandNotManagedException">
      <summary>Thrown when an attempt is made to use a command which has not been registered with a command manager.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandNotRegisteredException">
      <summary>Thrown when a command-driven element is created with a command name for a command which hasn't been registered with the application's
.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandUnavailableException">
      <summary>Thrown when an attempt is made to use a command which is unavailable.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ConfigurablePreviewControlAttribute">
      <summary>Provides information about a control that should be used to handle the preview generated by a specified preview document.</summary>
    </member>
    <member name="T:DriveWorks.Applications.DiscreteWizardBase">
      <summary>Provides a base implementation of the  interface which makes it easier to create wizards which are based on discrete steps
for use with DriveWorks applications.</summary>
    </member>
    <member name="T:DriveWorks.Applications.DiscreteWizardStep">
      <summary>The base class for the  class.</summary>
    </member>
    <member name="T:DriveWorks.Applications.DiscreteWizardStep`1">
      <summary>Represents a step in a discrete wizard.</summary>
    </member>
    <member name="T:DriveWorks.Applications.DynamicPreviewControlAttribute">
      <summary>Provides information about a control that should be used to handle the preview generated by the 3D preview service for a particular preview engine.</summary>
    </member>
    <member name="T:DriveWorks.Applications.EventFromHasValidation">
      <summary>Provides support for passing the  event as an object.</summary>
    </member>
    <member name="T:DriveWorks.Applications.EventFromReflection">
      <summary>Provides support for passing an event retrieved by reflection as an object.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ExceptionEventArgs">
      <summary>Provides event data for events related to exceptions.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensions">
      <summary>Provides extension methods which simplify working with the application framework.</summary>
    </member>
    <member name="T:DriveWorks.Applications.FileNotFoundEventArgs">
      <summary>Provides event data for events related to files not being found.</summary>
    </member>
    <member name="T:DriveWorks.Applications.GroupCredentialsRequestContext">
      <summary>Provides contextual information about a request for group credentials.</summary>
    </member>
    <member name="T:DriveWorks.Applications.HelpProvider">
      <summary>Provides methods for getting and setting help topic names on WPF based controls.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ImageHandle">
      <summary>The common base class for image handles such as  and <see cref="T:DriveWorks.Applications.ManagedImageHandle" />.</summary>
    </member>
    <member name="T:DriveWorks.Applications.InvalidTemplateException">
      <summary>Thrown when the XML inside a template is invalid.</summary>
    </member>
    <member name="T:DriveWorks.Applications.ManagedImageHandle">
      <summary>Represents a .NET image to be used with an application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.MultiEvent">
      <summary>Aggregates multiple instances of the  class into one.</summary>
    </member>
    <member name="T:DriveWorks.Applications.PendingChange">
      <summary>Provides details about an external change and how to resolve it.</summary>
    </member>
    <member name="T:DriveWorks.Applications.PendingChangeEventArgs">
      <summary>Event information that allows listeners to register changes that can be applied.</summary>
    </member>
    <member name="T:DriveWorks.Applications.RequiredServiceException">
      <summary>Thrown when a required service is not present.</summary>
    </member>
    <member name="T:DriveWorks.Applications.SelectionChangeEventArgs">
      <summary>Provides the event data for selection change events.</summary>
    </member>
    <member name="T:DriveWorks.Applications.SettingsPage">
      <summary>Provides the base class for settings pages.</summary>
    </member>
    <member name="T:DriveWorks.Applications.SettingsPageAttribute">
      <summary>Exports a settings page from a library so that it can be shown in the settings window.</summary>
    </member>
    <member name="T:DriveWorks.Applications.SettingValueChangedEventArgs">
      <summary>Provides information about the setting value that changed.</summary>
    </member>
    <member name="T:DriveWorks.Applications.SharedViewNames">
      <summary>Provides access to the shared view names in DriveWorks</summary>
    </member>
    <member name="T:DriveWorks.Applications.StandardCommandNames">
      <summary>Provides access to standard command names for use with user-interface elements that support commands.</summary>
    </member>
    <member name="T:DriveWorks.Applications.StandardImageHandle">
      <summary>Represents an image built-in to an application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.StandardPreviewControlAttribute">
      <summary>Provides information about a control that should be used to preview supported files.</summary>
    </member>
    <member name="T:DriveWorks.Applications.StandardStates">
      <summary>Provides definitions of common application states.</summary>
    </member>
    <member name="T:DriveWorks.Applications.StateFilter">
      <summary>Represents a filter which includes or excludes a filtered entity (e.g. a view or command) in/from one or more application states, e.g. a group being open.</summary>
    </member>
    <member name="T:DriveWorks.Applications.TopicHelpEventArgs">
      <summary>Inherits  to provide information about the topic to be shown for a help request.</summary>
    </member>
    <member name="T:DriveWorks.Applications.TransactionEventArgs">
      <summary>Provides event data for transaction events, for example </summary>
    </member>
    <member name="T:DriveWorks.Applications.ViewControl">
      <summary>Provides the base class for views.</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemData">
      <summary>Holds the data required for a virtual item, for example, in a virtual split list.</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemDeletedEventArgs">
      <summary>Provides the event data for events such as .</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemDeletingEventArgs">
      <summary>Provides the event data for events such as .</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemSelectedEventArgs">
      <summary>Provides the event data for events such as .</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemsRequestEventArgs">
      <summary>Provides the event data for events such as  which request virtual items.</summary>
    </member>
    <member name="T:DriveWorks.Applications.WizardBase">
      <summary>Provides a base implementation of the  interface which makes it easier to create wizards for use with DriveWorks
applications.</summary>
    </member>
    <member name="T:DriveWorks.Applications.WizardRunningException">
      <summary>Thrown when an attempt is made to show a wizard when a wizard service is already showing another wizard.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ApplicationEventEventArgs.#ctor(DriveWorks.Applications.IApplicationEvent)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="evt">The event.</param>
    </member>
    <member name="P:DriveWorks.Applications.ApplicationEventEventArgs.Event">
      <summary>Gets the event.</summary>
    </member>
    <member name="M:DriveWorks.Applications.CommandInvokeEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the the  class.</summary>
      <param name="commandContext">The context passed to the command's  method.</param>
    </member>
    <member name="P:DriveWorks.Applications.CommandInvokeEventArgs.CommandContext">
      <summary>Gets the context passed to the command's  method.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ConfigurablePreviewControlAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="documentType">The type of document this control handles.</param>
    </member>
    <member name="P:DriveWorks.Applications.ConfigurablePreviewControlAttribute.ControlType">
      <summary>Gets the type of document this control handles. See remarks for details.</summary>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardBase.CancelCore">
      <summary>Performs any additional processing required before cancelling.</summary>
      <returns>True if the cancel operation is allowed to proceed.</returns>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardBase.FinishCore">
      <summary>Performs any additional processing required before finishing.</summary>
      <returns>True if the finish operation is allowed to proceed.</returns>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardBase.Initialize(DriveWorks.Applications.DiscreteWizardStep)">
      <summary>Called by the inheritor before the wizard is used to ensure that the initial state is setup.</summary>
      <param name="initialStep">The initial step.</param>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardBase.CreateStep``1(System.String,System.String,System.Drawing.Image,System.Func{``0,DriveWorks.Applications.DiscreteWizardStep})">
      <summary>Creates a new instance of the  class.</summary>
      <param name="title">The title of the step.</param>
      <param name="description">The description of the step.</param>
      <param name="image">The step's image.</param>
      <param name="getNextStepMethod">A method which will get the next step.</param>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardBase.CreateStep``1(System.String,System.String,System.Drawing.Image,System.Func{``0,DriveWorks.Applications.DiscreteWizardStep},System.Func{``0,DriveWorks.Applications.IEvent})">
      <summary>Creates a new instance of the  class.</summary>
      <param name="title">The title of the step.</param>
      <param name="description">The description of the step.</param>
      <param name="image">The step's image.</param>
      <param name="getNextStepMethod">A method which will get the next step.</param>
      <param name="getNextStepChangedEventProxyMethod">A method which will get an event which can be used to determine when the next step has changed.</param>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardBase.CreateStep``1(System.String,System.String,System.Drawing.Image,System.Func{``0,DriveWorks.Applications.DiscreteWizardStep},System.Func{``0,DriveWorks.Applications.IEvent},System.Func{``0})">
      <summary>Creates a new instance of the  class.</summary>
      <param name="title">The title of the step.</param>
      <param name="description">The description of the step.</param>
      <param name="image">The step's image.</param>
      <param name="getNextStepMethod">A method which will get the next step.</param>
      <param name="getNextStepChangedEventProxyMethod">A method which will get an event which can be used to determine when the next step has changed.</param>
      <param name="controlFactory">A factory method which will create the control which represents the UI for the step.</param>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardStep.GetControl">
      <summary>Gets the control which provides the UI for the step.</summary>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardStep.GetNextStep">
      <summary>Gets the next step if the state is valid, a null reference if the state is not valid, or  if the
wizard's next action is to finish.</summary>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardStep.OnNextStepChanged(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep.AutoAdvance">
      <summary>Gets/sets whether the step automatically advanced to the next step as soon as one is available.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep.Description">
      <summary>Gets the description of the step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep.HideFromNavigation">
      <summary>Determines whether the step is added to the list of previous steps when it is navigated past. This is useful when a step acts as a transition between one step
and another.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep.Image">
      <summary>Gets the image which represents the step (may return a null reference).</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep.IsCancelSuppressed">
      <summary>Gets/sets whether the step suppresses the cancel button on the wizard.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep.IsPreviousSuppressed">
      <summary>Gets/sets whether the step suppresses the previous button on the wizard.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep.Title">
      <summary>Gets the title of the step.</summary>
    </member>
    <member name="F:DriveWorks.Applications.DiscreteWizardStep.FinishStep">
      <summary>Represents the finish step.</summary>
    </member>
    <member name="E:DriveWorks.Applications.DiscreteWizardStep.Activated">
      <summary>Raised when the step is activated.</summary>
    </member>
    <member name="E:DriveWorks.Applications.DiscreteWizardStep.Deactivated">
      <summary>Raised when the step is deactivated.</summary>
    </member>
    <member name="E:DriveWorks.Applications.DiscreteWizardStep.NextStepChanged">
      <summary>Raised if the next step has changed, e.g. a different option was chosen, or the state has become valid/invalid.</summary>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardStep`1.GetControl">
      <summary>Gets the control which provides the UI for the step.</summary>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardStep`1.GetControlTyped">
      <summary>Gets the control.</summary>
    </member>
    <member name="M:DriveWorks.Applications.DiscreteWizardStep`1.GetNextStep">
      <summary>Gets the next step if the state is valid, a null reference if the state is not valid, or  if the
wizard's next action is to finish.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep`1.Description">
      <summary>Gets the description of the step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep`1.Image">
      <summary>Gets the image which represents the step (may return a null reference).</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep`1.IsControlCreated">
      <summary>Determines whether the control has been created.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep`1.Title">
      <summary>Gets the title of the step.</summary>
    </member>
    <member name="P:DriveWorks.Applications.DiscreteWizardStep`1.Wizard">
      <summary>Gets the wizard to which the step belongs.</summary>
    </member>
    <member name="M:DriveWorks.Applications.DynamicPreviewControlAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="previewEngine">The preview engine the tagged control supports.</param>
    </member>
    <member name="P:DriveWorks.Applications.DynamicPreviewControlAttribute.PreviewEngine">
      <summary>Gets the name of the preview engine the tagged control supports.</summary>
    </member>
    <member name="M:DriveWorks.Applications.EventFromHasValidation.#ctor(DriveWorks.Applications.IHasValidation)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="hasValidation">The object which supports validation.</param>
    </member>
    <member name="M:DriveWorks.Applications.EventFromReflection.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="obj">The instance of the object on which the event is defined.</param>
      <param name="eventName">The name of the event.</param>
    </member>
    <member name="M:DriveWorks.Applications.ExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="P:DriveWorks.Applications.ExceptionEventArgs.Exception">
      <summary>Gets the exception to which the event refers.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensions.GetDisableQueries(DriveWorks.Applications.ISettingsManager)">
      <summary>Gets the value of the Disable Queries setting.</summary>
      <returns>The value of the Disable Queries setting.</returns>
    </member>
    <member name="M:DriveWorks.Applications.Extensions.GetService``1(System.IServiceProvider)">
      <summary>Gets the specified service from the given service provider.</summary>
      <returns>A service of the specified type, or the default value for the specified type if the service isn't available.</returns>
      <typeparam name="T">The type of service to retrieve.</typeparam>
      <param name="serviceProvider">The service provider from which to get the service.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensions.GetServiceOrThrow``1(System.IServiceProvider)">
      <summary>Gets the specified service from the given service provider.</summary>
      <exception caption="" cref="T:DriveWorks.Applications.RequiredServiceException">The service is unavailable.</exception>
      <returns>A service of the specified type, an exception is thrown if the service is unavailable.</returns>
      <typeparam name="T">The type of service to retrieve.</typeparam>
      <param name="serviceProvider">The service provider from which to get the service.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensions.GetSettingAsDecryptedString(DriveWorks.Applications.ISettingsManager,DriveWorks.Applications.SettingLevel,System.String,System.Boolean)">
      <summary>Gets the specified setting as a string by using the data protection API to decrypt the value stored in the registry.</summary>
      <returns>A null reference (Nothing in Visual Basic) if the setting doesn't exist, otherwise the value of the setting.</returns>
      <param name="level">The level from which to load the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensions.RegisterService``1(DriveWorks.Applications.IServiceManager,``0)">
      <summary>Provides a safe way of registering a service.</summary>
      <typeparam name="T">The type of the service.</typeparam>
      <param name="serviceManager">The service manager in which to register the service.</param>
      <param name="serviceObject">The implementation of the service type.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensions.SetDisableQueries(DriveWorks.Applications.ISettingsManager,System.Boolean)">
      <summary>Sets the value of the Disable Queries setting.</summary>
      <param name="settingValue">The new value of the setting.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensions.SetSettingEncrypted(DriveWorks.Applications.ISettingsManager,DriveWorks.Applications.SettingLevel,System.String,System.String,System.Boolean)">
      <summary>Saves the specified setting.</summary>
      <param name="level">The level at which to save the setting.</param>
      <param name="settingName">The full name of the setting, e.g. "Common\MyValue".</param>
      <param name="settingValue">The value to save.</param>
      <param name="preventRedirection">True to prevent automatic redirection if redirection is turned on.</param>
    </member>
    <member name="M:DriveWorks.Applications.FileNotFoundEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="fileName">The path to the file which is missing.</param>
    </member>
    <member name="P:DriveWorks.Applications.FileNotFoundEventArgs.FileName">
      <summary>Gets the path to the file which is missing.</summary>
    </member>
    <member name="P:DriveWorks.Applications.GroupCredentialsRequestContext.ConnectionString">
      <summary>Gets/sets the connection string for which credentials are being requested.</summary>
    </member>
    <member name="P:DriveWorks.Applications.GroupCredentialsRequestContext.RememberUserName">
      <summary>Gets/sets whether the user name should be remembered for a successful logon.</summary>
    </member>
    <member name="M:DriveWorks.Applications.HelpProvider.GetTopicName(System.Windows.DependencyObject)">
      <summary>Gets the topic name specified in the control or on the first visual parent of the control.</summary>
      <returns>Topic name specified in the given control or one of its parents.</returns>
      <param name="control">The control to find the topic name on.</param>
    </member>
    <member name="M:DriveWorks.Applications.HelpProvider.SetTopicName(System.Windows.DependencyObject,System.String)">
      <summary>Sets the help topic name for the specified control.</summary>
      <param name="control">Control to set the topic name on.</param>
      <param name="value">The help topic name to set on the control.</param>
    </member>
    <member name="M:DriveWorks.Applications.InvalidTemplateException.#ctor(System.String)">
      <summary>Creates a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ManagedImageHandle.#ctor(System.Drawing.Image)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="image">The .NET image.</param>
    </member>
    <member name="P:DriveWorks.Applications.ManagedImageHandle.Image">
      <summary>Gets the .NET image.</summary>
    </member>
    <member name="M:DriveWorks.Applications.MultiEvent.#ctor(DriveWorks.Applications.IEvent[])">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="events">The events to aggregate.</param>
    </member>
    <member name="P:DriveWorks.Applications.PendingChange.Applicator">
      <summary>Gets a method that will resolve this pending change (save it).</summary>
    </member>
    <member name="P:DriveWorks.Applications.PendingChange.Title">
      <summary>The human readable short description of this change.</summary>
    </member>
    <member name="M:DriveWorks.Applications.PendingChangeEventArgs.#ctor(System.Collections.Generic.IList{DriveWorks.Applications.PendingChange})">
      <summary>Creates a new instance of the  class.</summary>
      <param name="changesCollection">The list to store all changes in.</param>
    </member>
    <member name="M:DriveWorks.Applications.PendingChangeEventArgs.AddChange(System.String,System.Action)">
      <summary>Registers a change with the event raiser, to be applied if deemed necessary.</summary>
      <param name="title">A short title of what the pending change is for.</param>
      <param name="applicator">A method that when called with apply the pending change.</param>
    </member>
    <member name="M:DriveWorks.Applications.RequiredServiceException.#ctor(System.String)">
      <summary>Initializes a new instance of the  exception class.</summary>
      <param name="serviceName">The name of the missing service.</param>
    </member>
    <member name="M:DriveWorks.Applications.RequiredServiceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <paramref name="info" /> with information about the instance.</summary>
      <param name="info">The  that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The  that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:DriveWorks.Applications.RequiredServiceException.ServiceName">
      <summary>Gets the name of the required service that was not present.</summary>
    </member>
    <member name="M:DriveWorks.Applications.SelectionChangeEventArgs.#ctor(System.Object[],System.Object[])">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="oldSelectedItems">The selection before the change took place.</param>
      <param name="newSelectedItems">The new selection.</param>
    </member>
    <member name="P:DriveWorks.Applications.SelectionChangeEventArgs.NewSelectedItems">
      <summary>Gets the new selection.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SelectionChangeEventArgs.OldSelectedItems">
      <summary>Gets the selection before the change took place.</summary>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.#ctor">
      <summary>Initializes the settings page without a state filter.</summary>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.#ctor(DriveWorks.Applications.StateFilter)">
      <summary>Initializes a settings page with a state filter.</summary>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.Activate">
      <summary>Called by the hosting application when a page is activated.</summary>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.ActivateCore(System.Boolean,System.Boolean@)">
      <summary>When overridden by a derived class, performs activation logic specific to the derived page.</summary>
      <param name="firstShow">True if it is the first time the page has been shown.</param>
      <param name="cancel">Set to true by the overridden method to cancel the navigation action if desired.</param>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.Close(System.Boolean)">
      <summary>When overridden by a derived class, performs closing logic specific to the derived page.</summary>
      <param name="save">True if the settings on page are to be stored.</param>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.Deactivate">
      <summary>Called by the hosting application when the page is being changed.</summary>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.DeactivateCore(System.Boolean@)">
      <summary>When overridden by a derived class, performs deactivation logic specific to the derived page.</summary>
      <param name="cancel">Set to true by the overridden method to cancel the navigation action if desired.</param>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.Initialize(DriveWorks.Applications.IApplication,DriveWorks.Applications.ISettingsManager)">
      <summary>Initializes the page with core objects.</summary>
      <param name="application">The host application.</param>
      <param name="settingsManager">The settings manager.</param>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPage.InitializeCore">
      <summary>When overridden by a derived class, performs initialization logic specific to the derived view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPage.Application">
      <summary>Gets the application which is hosting the page.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPage.HasBeenShown">
      <summary>Determines whether the settings page has been shown at least once.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPage.SettingsManager">
      <summary>Gets the settings manager which can be used by the page to access settings.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPage.StateFilter">
      <summary>Gets the state filter which determines when the settings page should be shown.</summary>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPageAttribute.#ctor(System.String,System.String,System.String,System.String,System.Type)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="invariantName">The non-localized name of the settings page.</param>
      <param name="displayName">The display name of the settings page.</param>
      <param name="description">The description of the settings page.</param>
      <param name="imageResourceName">The name of the resource containing the page's image in the form "#ResourceManifestName,ImageResourceName", e.g.
"#MyAssembly.LocalizedResources,MySettingsPageImage".</param>
      <param name="pageType">The CLR type of the control which implements the settings page.</param>
    </member>
    <member name="M:DriveWorks.Applications.SettingsPageAttribute.#ctor(System.String,System.String,System.String,System.String,System.Type,System.String,DriveWorks.Applications.SettingsPagePosition)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="invariantName">The non-localized name of the settings page.</param>
      <param name="displayName">The display name of the settings page.</param>
      <param name="description">The description of the settings page.</param>
      <param name="imageResourceName">The name of the resource containing the page's image in the form "#ResourceManifestName,ImageResourceName", e.g.
"#MyAssembly.LocalizedResources,MySettingsPageImage".</param>
      <param name="pageType">The CLR type of the control which implements the settings page.</param>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPageAttribute.Description">
      <summary>Gets the description of the settings page.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPageAttribute.DisplayName">
      <summary>Gets the display name of the settings page.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPageAttribute.ImageResourceName">
      <summary>Gets the resource name of the image for the settings page.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPageAttribute.InvariantName">
      <summary>Gets the invariant non-localized name of the settings page.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPageAttribute.PageType">
      <summary>Gets the CLR type of the control which implements the settings page.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPageAttribute.Position">
      <summary>Specifies the position of the settings page relative to the settings page named in .</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingsPageAttribute.RelativeTo">
      <summary>Specifies the name of another settings page to which the settings page is relatively positioned.</summary>
    </member>
    <member name="M:DriveWorks.Applications.SettingValueChangedEventArgs.#ctor(System.String,System.Object)">
      <summary>Creates a new instance of the  event args.</summary>
      <param name="settingName">The name of the setting whose value was changed.</param>
      <param name="settingValue">The new value of the setting.</param>
    </member>
    <member name="P:DriveWorks.Applications.SettingValueChangedEventArgs.SettingName">
      <summary>Gets the name of the setting whose value changed.</summary>
    </member>
    <member name="P:DriveWorks.Applications.SettingValueChangedEventArgs.SettingValue">
      <summary>Gets the new value of the setting.</summary>
    </member>
    <member name="F:DriveWorks.Applications.SharedViewNames.GroupSpecificationExplorer">
      <summary>The name of the specification explorer view when we have logged into a group but not a project</summary>
    </member>
    <member name="F:DriveWorks.Applications.SharedViewNames.ProjectSpecificationExplorer">
      <summary>The name of the specification explorer when we have logged into a project</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.BuildSelected">
      <summary>The name of the command which when executed, builds the rules for the selected item(s).</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.CheckAll">
      <summary>The name of the command which when executed, changes all checkboxes to the checked state.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.CloseGroup">
      <summary>The name of the command which when executed, closes the active group.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.CloseGroupWithoutPrompt">
      <summary>The name of the command which when executed, closes a particular group without prompting to save the currently opened project.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.CloseProject">
      <summary>The name of the command which when executed, closes the active project.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.CloseProjectWithoutPrompt">
      <summary>The name of the command which when executed, closes a particular project without prompting to save the currently opened project.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.CollapseItem">
      <summary>Contracts the children of the focused item.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.CopySelected">
      <summary>The name of the command which when executed, copies the selected item(s).</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.CutSelected">
      <summary>The name of the command which when executed, cuts the selected item(s).</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.DeleteSelected">
      <summary>The name of the command which when executed, deletes the selected item(s).</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.DeselectAll">
      <summary>Deselects all the children of the control which contains the focus.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.DeselectAllChildren">
      <summary>Deselects all the children of the focussed item.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ExpandAll">
      <summary>Expands all of the children of the control which contains the focus.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ExpandAllChildren">
      <summary>Expands all the children of the focused item.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ExpandItem">
      <summary>Expands the children of the focused item.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.OpenGroup">
      <summary>The name of the command which when executed, opens a particular group.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.OpenGroupWithoutPrompt">
      <summary>The name of the command which when executed, opens a particular group without prompting to save the currently opened project.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.OpenLastGroup">
      <summary>The name of the command that when executed will open the last group that was used.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.OpenProject">
      <summary>The name of the command which when executed, opens a particular project.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.OpenProjectWithoutPrompt">
      <summary>The name of the command which when executed, opens a particular project without prompting to save the currently opened project.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.PasteIntoSelected">
      <summary>The name of the command which when executed, pastes from the clipboard into the selected object.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.Redo">
      <summary>The name of the command which when executed, redoes a change</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.Refresh">
      <summary>The name of the command which when executed, refreshes the current object or view.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.RenameSelected">
      <summary>The name of the command which when executed, renames the selected item(s).</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.SaveProject">
      <summary>The name of the command which when executed, saves the project.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.SearchRules">
      <summary>The name of the command which when executed, will open a search dialog displaying all rules in the project.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.SelectAll">
      <summary>Selects all of the children of the control which contains the focus.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.SelectAllChildren">
      <summary>Selects all the children of the focussed item.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowGroupWizard">
      <summary>The name of the command which when executed, shows the group wizard.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowHelp">
      <summary>The name of the command that when executed will open the DriveWorks help file.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowHelpAbout">
      <summary>The name of the command that when executed will show the about screen.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowNewGroupWizard">
      <summary>The name of the command which when executed, shows the new group wizard.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowNewProjectWizard">
      <summary>The name of the command which when executed, shows the new project wizard.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowOpenGroupWizard">
      <summary>The name of the command which when executed, shows the open group wizard.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowOpenProjectWizard">
      <summary>The name of the command which when executed, shows the open project wizard.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowProjectWizard">
      <summary>The name of the command which when executed, shows the project wizard.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.ShowSettings">
      <summary>The name of the command which when executed, shows the settings screen.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.StartAutopilot">
      <summary>The name of the command that when executed will start Autpilot.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.StartSolidWorks">
      <summary>The name of the command that when executed will start SOLIDWORKS in an application that supports it.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.UncheckAll">
      <summary>The name of the command which when executed, changes all checkboxes to an unchecked state.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.Undo">
      <summary>The name of the command which when executed, undoes a change</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.UnexpandAll">
      <summary>Contracts all of the children of the control which contains the focus.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardCommandNames.UnexpandAllChildren">
      <summary>Contracts all the children of the focused item.</summary>
    </member>
    <member name="M:DriveWorks.Applications.StandardImageHandle.#ctor(System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="imageName">The name of the built-in image.</param>
    </member>
    <member name="P:DriveWorks.Applications.StandardImageHandle.ImageName">
      <summary>Gets the name of the built-in image.</summary>
    </member>
    <member name="M:DriveWorks.Applications.StandardPreviewControlAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="supportedExtension">The supported file extension.</param>
    </member>
    <member name="P:DriveWorks.Applications.StandardPreviewControlAttribute.SupportedExtension">
      <summary>Gets the file extension supported by this preview control.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardStates.GroupLoaded">
      <summary>Gets the GUID which represents the group loaded state.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardStates.GroupLoadedStateFilter">
      <summary>Gets a state filter which includes the filtered element only if the group loaded state is active.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardStates.ProjectLoaded">
      <summary>Gets the GUID which represents the project loaded state.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StandardStates.ProjectLoadedStateFilter">
      <summary>Gets a state filter which includes the filtered element only if the project loaded state is active.</summary>
    </member>
    <member name="M:DriveWorks.Applications.StateFilter.#ctor(System.Guid)">
      <summary>Initializes a new instance of the  type which has only a single included state.</summary>
      <param name="includedState">The state to include.</param>
    </member>
    <member name="M:DriveWorks.Applications.StateFilter.#ctor(System.Guid[],System.Guid[])">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="includedStates">The states in which the filtered entity is included.</param>
      <param name="excludedStates">The states from which the filtered enttity is excluded.</param>
    </member>
    <member name="M:DriveWorks.Applications.StateFilter.AreAllIncluded(System.Guid[])">
      <summary>Checks whether the state filter means that the filtered entity is included in the specified state by verifying that all of the included states are included in
the state.</summary>
      <returns>True if all included states in this state filter as present in the given array.</returns>
      <param name="state">The array of states that comprise the application state.</param>
    </member>
    <member name="M:DriveWorks.Applications.StateFilter.IsIncluded(System.Guid[])">
      <summary>Checks whether the state filter means that the filtered entity is included in the specified state.</summary>
      <returns>True if the filtered entity is included, false if the filtered entity is excluded.</returns>
      <param name="state">The array of states that comprise the application state.</param>
    </member>
    <member name="P:DriveWorks.Applications.StateFilter.ExcludedStates">
      <summary>Gets the states from which the entity controlled by the filter is excluded.</summary>
      <returns>An array of globally unique identifiers representing the individual states from which to exclude the filtered entity.</returns>
    </member>
    <member name="P:DriveWorks.Applications.StateFilter.IncludedStates">
      <summary>Gets the states in which the entity controlled by the filter is included.</summary>
      <returns>An array of globally unique identifiers representing the individual states in which to include the filtered entity.</returns>
    </member>
    <member name="F:DriveWorks.Applications.StateFilter.Empty">
      <summary>Gets a state filter which includes the filtered entity in all states.</summary>
    </member>
    <member name="F:DriveWorks.Applications.StateFilter.EmptyStates">
      <summary>Gets an empty array of state identifiers.</summary>
    </member>
    <member name="M:DriveWorks.Applications.TopicHelpEventArgs.#ctor(System.Drawing.Point,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="mousePos">The mouse position.</param>
      <param name="topicName">The name of the topic to show.</param>
    </member>
    <member name="P:DriveWorks.Applications.TopicHelpEventArgs.TopicName">
      <summary>Gets the name of the topic to show.</summary>
    </member>
    <member name="M:DriveWorks.Applications.TransactionEventArgs.#ctor(System.Type,DriveWorks.Applications.IView,System.Boolean)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="transactionType">The type of the transaction that was committed.</param>
      <param name="view">The view responsible for the transaction.</param>
      <param name="isRegistering">Whether or not this transaction is a registering transaction, see .</param>
    </member>
    <member name="P:DriveWorks.Applications.TransactionEventArgs.IsRegistering">
      <summary>Gets whether this transaction is being registered for the first time. As apposed to being run through undo or redo.</summary>
    </member>
    <member name="P:DriveWorks.Applications.TransactionEventArgs.TransactionType">
      <summary>Gets the type of the transaction that was committed.</summary>
    </member>
    <member name="P:DriveWorks.Applications.TransactionEventArgs.View">
      <summary>Gets the view responsible for the transaction.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.ActivateCore(System.Boolean,System.Boolean@)">
      <summary>When overridden by a derived class, performs activation logic specific to the derived view.</summary>
      <param name="firstShow">True if it is the first time the view control has been shown.</param>
      <param name="cancel">Set to true by the overridden method to cancel to navigation action if desired.</param>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.ClearSelection">
      <summary>Clears the selection.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.DeactivateCore(System.Boolean@)">
      <summary>When overridden by a derived class, performs deactivation logic specific to the derived view.</summary>
      <param name="cancel">The view should set this value to true before exiting the method if the view wishes to cancel the view switch.</param>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.DisplayHelp">
      <summary>Shows help associated with the view.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.GetHelpTopicName">
      <summary>Gets the name of the help topic shown by the view.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.HistoricalTransactionExecuting(System.Type)">
      <summary>When overridden by a derived class, performs transaction executing logic specific to the derived view.</summary>
      <param name="transactionType">The type of transaction that is about to be executed.</param>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.HistoricalTransactionFinished(System.Type)">
      <summary>When overridden by a derived class, performs transaction finished logic specific to the derived view.</summary>
      <param name="transactionType">The type of transaction that is about to be executed.</param>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.InitializeCore">
      <summary>When overridden by a derived class, performs initialization logic specific to the derived view.</summary>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.OnSelectedItemsChanged(DriveWorks.Applications.SelectionChangeEventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.SetSelection(System.Object[],System.Boolean)">
      <summary>Sets the current selection.</summary>
      <param name="newSelection">The new selection.</param>
      <param name="clone">Dictates whether the array is cloned, if you make any changes to the array after calling this method, you should opt to clone the array, otherwise it is safe
to pass false for this parameter's argument.</param>
    </member>
    <member name="M:DriveWorks.Applications.ViewControl.Initialize(DriveWorks.Applications.IViewEnvironment)">
      <summary>Initializes the view.</summary>
      <param name="environment">The view's environment.</param>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.Application">
      <summary>Gets the application which is hosting the view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.CommandBarManager">
      <summary>Gets the view's command bar manager</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.CommandManager">
      <summary>Gets the view's local command bar manager</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.CommandOverrideService">
      <summary>Gets the view's command override service allowing it to override the standard implementations of commands.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.Module">
      <summary>Gets the application which registered the view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.SelectionSite">
      <summary>Gets the selection site for the view.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.TransactionGroup">
      <summary>The group that will be used for this view control's transaction collection.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.TransactionManager">
      <summary>Gets the transaction manager for this application.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.ViewEnvironment">
      <summary>Gets the view's environment.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.ViewName">
      <summary>Gets the name given to the view when it was registered.</summary>
    </member>
    <member name="P:DriveWorks.Applications.ViewControl.ViewTitle">
      <summary>The title given to the view when it was registered.</summary>
    </member>
    <member name="M:DriveWorks.Applications.VirtualItemData.#ctor(System.String,DriveWorks.Applications.ImageHandle,System.Object)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="title">The localized title of the item.</param>
      <param name="imageHandle">A handle to an image which will be shown with the item.</param>
      <param name="tag">A tag which can be used to store additional data.</param>
    </member>
    <member name="P:DriveWorks.Applications.VirtualItemData.ImageHandle">
      <summary>Gets a handle to an image that will be shown with the item.</summary>
    </member>
    <member name="P:DriveWorks.Applications.VirtualItemData.Tag">
      <summary>Gets user-defined additional data for the item.</summary>
    </member>
    <member name="P:DriveWorks.Applications.VirtualItemData.Title">
      <summary>Gets the localized title of the item.</summary>
    </member>
    <member name="M:DriveWorks.Applications.VirtualItemDeletedEventArgs.#ctor(DriveWorks.Applications.VirtualItemData)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="item">The data for the virtual item that was selected.</param>
    </member>
    <member name="P:DriveWorks.Applications.VirtualItemDeletedEventArgs.Item">
      <summary>Gets the data for the virtual item that was selected.</summary>
    </member>
    <member name="M:DriveWorks.Applications.VirtualItemDeletingEventArgs.#ctor(DriveWorks.Applications.VirtualItemData)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="item">The data for the virtual item that was selected.</param>
    </member>
    <member name="P:DriveWorks.Applications.VirtualItemDeletingEventArgs.Cancel">
      <summary>Gets/sets whether the delete should be cancelled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.VirtualItemDeletingEventArgs.Item">
      <summary>Gets the data for the virtual item that was selected.</summary>
    </member>
    <member name="M:DriveWorks.Applications.VirtualItemSelectedEventArgs.#ctor(DriveWorks.Applications.VirtualItemData)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="item">The data for the virtual item that was selected.</param>
    </member>
    <member name="P:DriveWorks.Applications.VirtualItemSelectedEventArgs.Item">
      <summary>Gets the data for the virtual item that was selected.</summary>
    </member>
    <member name="M:DriveWorks.Applications.VirtualItemsRequestEventArgs.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="P:DriveWorks.Applications.VirtualItemsRequestEventArgs.Items">
      <summary>Gets/sets the virtual items which will be used by the sender of the event.</summary>
    </member>
    <member name="M:DriveWorks.Applications.WizardBase.DisplayHelpTopic(System.String)">
      <summary>Shows the specified help topic.</summary>
      <param name="topicName">The name of the help topic to show.</param>
    </member>
    <member name="M:DriveWorks.Applications.WizardBase.GetHeaderImageFromResource(System.String)">
      <summary>A helper function which gets an image which has been embedded as a resource in the implementing type's assembly.</summary>
      <param name="resourceName">The name of the image resource.</param>
    </member>
    <member name="M:DriveWorks.Applications.WizardBase.PushStep(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Manual pushes a step on to the list of previous steps. May be useful if GetInitialStep returns a step other than the zeroeth.</summary>
      <param name="stepControl">The step to push on to the stack.</param>
      <param name="isCancelEnabled">True if the cancel button should be enabled when the step is activated.</param>
      <param name="isPreviousEnabled">True if the previous button should be enabled when the step is activated.</param>
      <param name="isNextEnabled">True if the next button should be enabled when the step is activated.</param>
      <param name="isFinishEnabled">True if the finish button should be enabled when the step is activated.</param>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.ActiveStepDescription">
      <summary>If the value from the  property implements the <see cref="T:DriveWorks.Applications.IWizardStep" /> interface then the
description is returned from the active step, otherwise the <see cref="P:DriveWorks.Applications.WizardBase.FallbackStepDescription" /> is returned.</summary>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.ActiveStepImage">
      <summary>If the value from the  property implements the <see cref="T:DriveWorks.Applications.IWizardStep" /> interface then the
image is returned from the active step, otherwise the <see cref="P:DriveWorks.Applications.WizardBase.FallbackStepImage" /> is returned.</summary>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.ActiveStepTitle">
      <summary>If the value from the  property implements the <see cref="T:DriveWorks.Applications.IWizardStep" /> interface then the
title is returned from the active step, otherwise the <see cref="P:DriveWorks.Applications.WizardBase.FallbackStepTitle" /> is returned.</summary>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.FallbackStepDescription">
      <summary>Provides the description used for the active step if the value from the  property does not implement the
<see cref="T:DriveWorks.Applications.IWizardStep" /> interface.</summary>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.FallbackStepImage">
      <summary>Provides the image used for the active step if the value from the  property does not implement the
<see cref="T:DriveWorks.Applications.IWizardStep" /> interface.</summary>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.FallbackStepTitle">
      <summary>Provides the title used for the active step if the value from the  property does not implement the
<see cref="T:DriveWorks.Applications.IWizardStep" /> interface.</summary>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.IsHelpEnabled">
      <summary>Determines if the help button is enabled, the default implementation checks to see if the wizard implements the  interface.</summary>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.NavigationDepth">
      <summary>Returns the number of steps that have been traversed in the navigation.</summary>
    </member>
    <member name="P:DriveWorks.Applications.WizardBase.WizardTitle">
      <summary>Gets the title of the wizard.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CommandInvokeEventHandler">
      <summary>The event handler delegate for the various invocation events on the  type.</summary>
    </member>
    <member name="T:DriveWorks.Applications.CreateServiceObjectHandler">
      <summary>Provides support for lazy creation of services.</summary>
      <returns>An instance of an object implementing the specified service, or a null reference (Nothing in Visual Basic) if the specified type is not supported.</returns>
    </member>
    <member name="T:DriveWorks.Applications.SelectionChangedEventHandler">
      <summary>Represent the method that will handle selection change events.</summary>
    </member>
    <member name="T:DriveWorks.Applications.TransactionEventHandler">
      <summary>The event delegate used for events which have transactional event data, for example .</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemDeletedEventHandler">
      <summary>Represents a method which will handle the  event.</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemDeletingEventHandler">
      <summary>Represents a method which will handle the  event.</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemSelectedEventHandler">
      <summary>Represents a method which will handle the  event.</summary>
    </member>
    <member name="T:DriveWorks.Applications.VirtualItemsRequestEventHandler">
      <summary>The event handler delegate used for events such as  which request virtual items.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.IHasWpfControl">
      <summary>Provides a contract for an object to have a WPF based control</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.IHasWpfControl.Control">
      <summary>Gets the WPF based control for this object</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands">
      <summary>Provides access to the names of common commands in DriveWorks Administrator.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.AdministratorViewNames">
      <summary>Provides access to the names of common views in DriveWorks Administrator.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AddDataTable">
      <summary>Gets the name of the command responsible for adding a table on the tables view control.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AddMessage">
      <summary>Gets the name of the command responsible for adding a new message to form messages view control.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AlignBottom">
      <summary>Gets the name of the command responsible for aligning a group of objects to the bottom.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AlignCenter">
      <summary>Gets the name of the command responsible for aligning a group of objects to the center.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AlignHorizontalEqual">
      <summary>Gets the name of the command responsible for aligning a group of objects to have equal horizontal spacing.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AlignLeft">
      <summary>Gets the name of the command responsible for aligning a group of objects to the left.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AlignMiddle">
      <summary>Gets the name of the command responsible for aligning a group of objects to the middle.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AlignRight">
      <summary>Gets the name of the command responsible for aligning a group of objects to the right.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AlignTop">
      <summary>Gets the name of the command responsible for aligning a group of objects to the top.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AlignVerticalEqual">
      <summary>Gets the name of the command responsible for aligning a group of objects to have equal vertical spacing.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.AnalyzeRules">
      <summary>Gets the name of the command responsible for analyzing the selected rule(s).</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.CancelCloseEditDataTable">
      <summary>Gets the name of the command responsible for closing the data table currently being edited and not saving the changes.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.CancelCloseEditDocuemnt">
      <summary>Gets the name of the command responsible for closing the document currently being edited and not saving the changes.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ClearSpecFlow">
      <summary>Gets the name of the command responsible for clearing the specificaiton flow.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ClearUserPassword">
      <summary>Gets the name of the command responsible for clearing the selected user's password.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ConfigureThemeWebEdition">
      <summary>Gets the name of the command responsible for changing the theme of the personal web server.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.CreateControl">
      <summary>Gets the name of the command responsible for creating a new form control.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.CreateResolutionGuide">
      <summary>Gets the name of the command responsible for creating resolution guides.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.CustomizeSpecFlow">
      <summary>Gets the name of the command responsible for enabling customization of specification flow.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.DeleteTableRow">
      <summary>Gets the name of the command responsible for deleting the selected rows.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.EditDataTable">
      <summary>Gets the name of the command responsible for viewing / editing a table on the tables view control.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.EditDisplayFile">
      <summary>Gets the name of the command responsible for editing an existing display file.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.EditDocument">
      <summary>Gets the name of the command responsible for editing an existing document.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.EditUserOrTeam">
      <summary>Gets the name of the command responsible for editing the selected user or team.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ExportSpecFlowTemplate">
      <summary>Gets the name of the command responsible for exporting a specification flow to a template.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.InsertTableRow">
      <summary>Gets the name of the command responsible for inserting a new row into the selected table.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.LoadSpecFlowTemplate">
      <summary>Gets the name of the command responsible for loading a specification flow template.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.MoreControls">
      <summary>Gets the name of the command responsible for showing more controls.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.MoveItemDown">
      <summary>Gets the name of the command responsible for moving an item down.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.MoveItemUp">
      <summary>Gets the name of the command responsible for moving an item up.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.MovePropertyDown">
      <summary>Gets the name of the command responsible for moving a specification property down.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.MovePropertyUp">
      <summary>Gets the name of the command responsible for moving a specification property up.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewCategory">
      <summary>Gets the name of the command responsible for creating a new category.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewConstant">
      <summary>Gets the name of the command responsible for creating a new constant.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewDecision">
      <summary>Gets the name of the command responsible for creating a new decision on the form navigation view.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewDisplayFile">
      <summary>Gets the name of the command responsible for creating a new display file.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewDocument">
      <summary>Gets the name of the command responsible for creating a new document.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewForm">
      <summary>Gets the name of the command responsible for creating a new form on the form navigation view.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewOperation">
      <summary>Gets the name of the command responsible for creating a specification operation.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewSpecificationProperty">
      <summary>Gets the name of the command responsible for creating a new specification property.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewSpecificationState">
      <summary>Gets the name of the command responsible for creating a new specification state.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewTeam">
      <summary>Gets the name of the command responsible for creating a new team.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewTransition">
      <summary>Gets the name of the command respondisble for creating a specification transition.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewUser">
      <summary>Gets the name of the command responsible for creating a new user.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.NewVariable">
      <summary>Gets the name of the command responsible for creating a new variable.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.PreviewDocument">
      <summary>Gets the name of the command responsible for previewing a document.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.RemoveCategoryImage">
      <summary>Gets the name of the command responsible for removing and existing category's image.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ResetUserPassword">
      <summary>Gets the name of the command responsible for resetting the selected user's password.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.RestoreDefaultSpecFlow">
      <summary>Gets the name of the command responsible for restoring specification to default settings.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.SaveCloseEditDataTable">
      <summary>Gets the name of the command responsible for closing the data table currently being edited and saving the changes.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.SaveCloseEditDocument">
      <summary>Gets the name of the command responsible for closing the document currently being edited and saving the changes.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.SetCategoryImage">
      <summary>Gets the name of the command resposible for setting an existing category's image.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.SetEqualHeight">
      <summary>Gets the name of the command responsible for setting a group of object to have equal Height.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.SetEqualWidth">
      <summary>Gets the name of the command responsible for setting a group of object to have equal Width.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ShowValues">
      <summary>Gets the name of the command responsible for showing the value(s) of the selected rule(s).</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.StartWebEdition">
      <summary>Gets the name of the command responsible for starting the personal web server.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.StopWebEdition">
      <summary>Gets the name of the command responsible for stopping the personal web server.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ToggleFormNavPreviewVisibility">
      <summary>Gets the name of the command responsible for toggling the visibility of the preview window for form navigation.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ToggleShowChildVariables">
      <summary>Gets the name of the command responsible for toggling the display of child variables in the variables view.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ToggleSpecFlowPreviewVisibility">
      <summary>Gets the name of the command responsible for toggling the visibility of the preview window for specification flow.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ToggleSpecFlowTransitionVisibility">
      <summary>Gets the name of the command responsible for toggling the visibility of transition controls.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ToggleTestMode">
      <summary>Gets the name of the command responsible for toggling form test mode.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Administrator.Extensibility.AdministratorCommands.ViewDataTable">
      <summary>Gets the name of the command responsible for view the data in a data table.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableDesigner">
      <summary>Provides a contract for objects which provide support for creating and administering data tables.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableTestController">
      <summary>Provides support for retrieving the UI to display for the data table when running in test mode in a specification.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableTestProvider">
      <summary>Provides support for displaying a table in test mode during a specification.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableViewController">
      <summary>Provides a contract between the DriveWorks Administrator DataTable management view, and a data table designer's view UI.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.DataTables.IGroupDataTableDesigner">
      <summary>Provides a contract for objects which provide support for creating and administering group data tables.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.DataTables.IGroupDataTableViewController">
      <summary>Provides a contract between the DriveWorks Administrator DataTable management view, and a data table designer's view UI.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableDesigner.GetCreationWizard(DriveWorks.Applications.IApplication)">
      <summary>Gets a wizard used to configure a new data table of the supported type.</summary>
      <param name="application">The running application.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableDesigner.GetEditWizard(DriveWorks.Applications.IApplication,DriveWorks.ProjectDataTable)">
      <summary>Gets a wizard used to configure a new data table of the supported type.</summary>
      <param name="application">The running application.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableDesigner.GetViewController(DriveWorks.Applications.IApplication,DriveWorks.ProjectDataTable)">
      <summary>Gets a administration controller for the given data table.</summary>
      <returns>An instance of a type which implements the  interface.</returns>
      <param name="application">The running application.</param>
      <param name="dataTable">The data table to administer.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableDesigner.InitializeNewDataTable(DriveWorks.Applications.IApplication,DriveWorks.Applications.IWizard,DriveWorks.ProjectDataTable)">
      <summary>Applies the settings gathered by the creation wizard returned by
 to the newly
created data table.</summary>
      <param name="application">The running application.</param>
      <param name="creationWizard">The creation wizard returned by
.</param>
      <param name="dataTable">The data table to which to apply the settings.</param>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableTestController.Control">
      <summary>Gets the UI responsible for displaying the table in test mode.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableTestProvider.GetTestController(DriveWorks.Applications.IApplication,DriveWorks.ProjectDataTable)">
      <summary>Gets the controller responsible for displaying the specified data table in test mode during a specification.</summary>
      <param name="application">The running application.</param>
      <param name="dataTable">The data table for which to display data.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableViewController.Close">
      <summary>Called by the data table management view to notify the data table view UI that it is being closed by the user.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.IDataTableViewController.Control">
      <summary>Gets the Windows Forms control which provides the data table view UI.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IGroupDataTableDesigner.GetCreationWizard(DriveWorks.Applications.IApplication)">
      <summary>Gets a wizard used to configure a new group data table of the supported type.</summary>
      <param name="application">The running application.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IGroupDataTableDesigner.GetEditWizard(DriveWorks.Applications.IApplication,DriveWorks.GroupDataTable)">
      <summary>Gets a wizard used to configure a group data table.</summary>
      <param name="application">The running application.</param>
      <param name="dataTable">The group data table to edit.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IGroupDataTableDesigner.GetViewController(DriveWorks.Applications.IApplication,DriveWorks.GroupDataTable)">
      <summary>Gets a administration controller for the given group data table.</summary>
      <returns>An instance of a type which implements the  interface.</returns>
      <param name="application">The running application.</param>
      <param name="dataTable">The group data table to administer.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IGroupDataTableDesigner.InitializeNewDataTable(DriveWorks.Applications.IApplication,DriveWorks.Applications.IWizard,DriveWorks.GroupDataTable)">
      <summary>Applies the settings gathered by the creation wizard returned by
 to the newly
created data table.</summary>
      <param name="application">The running application.</param>
      <param name="creationWizard">The creation wizard returned by
.</param>
      <param name="dataTable">The data table to which to apply the settings.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.IGroupDataTableViewController.Close">
      <summary>Called by the data table management view to notify the data table view UI that it is being closed by the user.</summary>
      <returns>False to abort closing the view, otherwise true. Please note that no message will be shown to the user if the close is aborted, therefore it is up to the view
to let the user know why the close was aborted.</returns>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.IGroupDataTableViewController.Control">
      <summary>Gets the Windows control which provides the data table view UI.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.DataTables.DataTableDesignerAttribute">
      <summary>Applied to a class implementing the  interface to provide information
about the data table designer.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.DataTables.GroupDataTableDesignerAttribute">
      <summary>Applied to a class implementing the  interface to provide information
about the group data table designer.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.DataTableDesignerAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the  attribute class.</summary>
      <param name="dataTableType">The type of data table supported by the designer (must be derived from ).</param>
      <param name="displayName">The localizable display name of the data table type.</param>
      <param name="image">The localizable image of the data table type.</param>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.DataTableDesignerAttribute.DataTableType">
      <summary>Gets the type of data table supported by the designer (must be derived from ).</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.DataTableDesignerAttribute.DisplayName">
      <summary>Gets the localizable display name of the data table type.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.DataTableDesignerAttribute.Image">
      <summary>Gets the localizable image of the data table type.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.DataTables.GroupDataTableDesignerAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the  attribute class.</summary>
      <param name="groupDataTableType">The type of group data table supported by the designer (must be derived from ).</param>
      <param name="displayName">The localizable display name of the group data table type.</param>
      <param name="image">The localizable image of the group data table type.</param>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.GroupDataTableDesignerAttribute.DataTableType">
      <summary>Gets the type of group data table supported by the designer (must be derived from ).</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.GroupDataTableDesignerAttribute.DisplayName">
      <summary>Gets the localizable display name of the group data table type.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.DataTables.GroupDataTableDesignerAttribute.Image">
      <summary>Gets the localizable image of the group data table type.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.Diagnostics.IRuleAnalyzerService">
      <summary>Provides support for documents to show the rules analyzer form.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Diagnostics.IRuleAnalyzerService.SetContext(DriveWorks.Abstractions.IHasRule,DriveWorks.Project)">
      <summary>Sets the object will that be shown in the rule analyzer.</summary>
      <param name="context">Object that contains rule to analyze</param>
      <param name="specificationProject">The owning project for the context.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Diagnostics.IRuleAnalyzerService.ShowAnalyzerDialog">
      <summary>Shows the Rules Analyzer form.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentAdministrationController">
      <summary>Provides a contract between the DriveWorks Administrator Document management view, and a document designer's administration UI.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentDesigner">
      <summary>Provides a contract for objects which provide support for creating and administering documents.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentTemplateHelper">
      <summary>Provides a contract for objects which provide support for templates.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentTestController">
      <summary>Used to control a document's test capability.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentTestProvider">
      <summary>When implemented by a document designer, provides support for specification test.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentAdministrationController.Close">
      <summary>Called by the document management view to notify the document administration UI that it is being closed by the user.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentAdministrationController.GetRulesForPreview">
      <summary>Gets a dictionary of rules ids and formulas for any rules which have been changed since the document administration was begun so that the preview capability
can calculate the correct values.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentAdministrationController.Control">
      <summary>Gets the Windows Forms control which provides the document administration UI.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentDesigner.GetAdministrationController(DriveWorks.Applications.IApplication,DriveWorks.ProjectDocument)">
      <summary>Gets an administration controller for the given document.</summary>
      <returns>An instance of a type which implements the  interface.</returns>
      <param name="application">The running application.</param>
      <param name="document">The document to administer.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentDesigner.GetCreationWizard(DriveWorks.Applications.IApplication)">
      <summary>Gets a wizard used to configure a new document of the supported type.</summary>
      <param name="application">The running application.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentDesigner.InitializeNewDocument(DriveWorks.Applications.IApplication,DriveWorks.Applications.IWizard,DriveWorks.ProjectDocument)">
      <summary>Applies the settings gathered by the creation wizard returned by
 to the newly
created document.</summary>
      <param name="application">The running application.</param>
      <param name="creationWizard">The creation wizard returned by
.</param>
      <param name="document">The document to which to apply the settings.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentDesigner.IsCompatible(DriveWorks.Applications.IApplication)">
      <summary>Queries the designer to see if it is compatible with the current application and it's design master etc. If this value returns false then the document will not
be visible as a new document type.</summary>
      <param name="application">The running application.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentTemplateHelper.InitializeTemplate(DriveWorks.Applications.IApplication,DriveWorks.ProjectDocument,System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>Applies the settings from the given template to the given document.</summary>
      <param name="application">The running application.</param>
      <param name="document">The document to which to apply the template.</param>
      <param name="templateData">The XML from the template that applies to this document</param>
      <param name="replacements">A collection of names and their replacements that should be applied when adding rules to the document.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentTestController.Activate">
      <summary>Notifies the controller that the document test UI is about to be activated.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentTestController.Deactivate">
      <summary>Notifies the controller that the document test UI has been deactivated.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentTestController.Control">
      <summary>Gets the Windows Forms control which provides the document test UI.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.IDocumentTestProvider.GetTestController(DriveWorks.Applications.IApplication,DriveWorks.ProjectDocument)">
      <summary>Creates a new test controller suitable for the document.</summary>
      <returns>An instance of a type which implements the  interface.</returns>
      <param name="application">The running application.</param>
      <param name="document">The document to be tested.</param>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.Documents.DocumentDesignerAttribute">
      <summary>Applied to a class implementing the  interface to provide information about
the document designer.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.DocumentDesignerAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the  attribute class.</summary>
      <param name="documentType">The type of document supported by the designer (must be derived from ).</param>
      <param name="displayName">The localizable display name of the document type.</param>
      <param name="image">The localizable image of the document type.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.Documents.DocumentDesignerAttribute.#ctor(System.Type,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  attribute class.</summary>
      <param name="documentType">The type of document supported by the designer (must be derived from ).</param>
      <param name="displayName">The localizable display name of the document type.</param>
      <param name="image">The localizable image of the document type.</param>
      <param name="descriptionHtml">The localizable description of the document.</param>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.Documents.DocumentDesignerAttribute.DescriptionHtml">
      <summary>Gets the localizable description of the document.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.Documents.DocumentDesignerAttribute.DisplayName">
      <summary>Gets the localizable display name of the document type.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.Documents.DocumentDesignerAttribute.DocumentType">
      <summary>Gets the type of document supported by the designer (must be derived from ).</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.Documents.DocumentDesignerAttribute.Image">
      <summary>Gets the localizable image of the document type.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleHelpProvider">
      <summary>Provides support for inline rule-help.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRulesBuilder">
      <summary>Provides access to the running rules builder.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRulesBuilderService">
      <summary>Provides access to the rules builder.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow">
      <summary>Provides a contract for interacting with a rules builder window.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleHelpProvider.GetSupportedRuleTypes">
      <summary>Gets an array of supported rule types.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleHelpProvider.RenderHelp(System.String,System.String)">
      <summary>Renders the help for the given rule type to the specified temporary directory, and returns the full path to the HTML file which will be shown in the rules
builder help pane.</summary>
      <returns>The full path to the rendered HTML file.</returns>
      <param name="ruleType">The type of rule which matched one of the supported rule types returned by
.</param>
      <param name="temporaryPath">The full path to a temporary directory into which the HTML and any supporting files should be copied.</param>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRulesBuilder.Context">
      <summary>Gets the rules aware object for which rules are being built.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRulesBuilder.ServiceManager">
      <summary>Gets a service manager which provides access to services provided by the rules builder.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRulesBuilder.Closing">
      <summary>Raised by the RulesBuilder when it is closing.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRulesBuilderService.AddHelpProvider(DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleHelpProvider)">
      <summary>Adds an inline help provider.</summary>
      <param name="provider">The provider to add.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRulesBuilderService.ShowBuilder(System.Object)">
      <summary>Shows the rules builder for the given rules-aware object.</summary>
      <returns>A result object.</returns>
      <param name="context">The rules aware object, for example, a , an object implementing <see cref="T:DriveWorks.Abstractions.IHasRule" />, or an array of such
objects.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRulesBuilderService.ShowBuilder(System.Object,System.String)">
      <summary>Shows the rules builder for the given rules-aware object, with a default rule.</summary>
      <returns>A result object.</returns>
      <param name="context">The rules aware object, for example, a , an object implementing <see cref="T:DriveWorks.Abstractions.IHasRule" />, or an array of such
objects.</param>
      <param name="defaultRule">Default rule to put in the rules builder.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.InsertString(System.String)">
      <summary>Inserts specified value into either the active rule's formula or the currently active wizard. While ensuring that it is wrapped in string quotes.</summary>
      <param name="value">The value to insert.</param>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.InsertValue(System.String)">
      <summary>Inserts specified value into either the active rule's formula or the currently active wizard.</summary>
      <param name="value">The value to insert.</param>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.Comment">
      <summary>Gets/sets the current comment for the active rule.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.CommentSelection">
      <summary>Gets/sets the currently selected text for the active rule's comment.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.CommentSelectionLength">
      <summary>Gets/sets the current selection's character span length for the active rule's comment.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.CommentSelectionStart">
      <summary>Gets/sets the current selection's start index for the active rule's comment.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.Formula">
      <summary>Gets/sets the current formula for the active rule.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.FormulaSelection">
      <summary>Gets/sets the currently selected text for the active rule's formula.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.FormulaSelectionLength">
      <summary>Gets/sets the current selection's character span length for the active rule's formula.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.IRuleWindow.FormulaSelectionStart">
      <summary>Gets/sets the current selection's start index for the active rule's formula.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.RulesBuilderResult">
      <summary>Provides the result data from invoking the rules builder.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.RulesBuilderResult.#ctor(System.Boolean,System.String,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="cancel">True if the rules builder was cancelled, otherwise false.</param>
      <param name="rule">The rule that the user entered.</param>
      <param name="comment">The comment that the user entered.</param>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.RulesBuilderResult.Cancel">
      <summary>Gets whether the rules builder was cancelled.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.RulesBuilderResult.Comment">
      <summary>Gets the comment that the user entered.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Administrator.Extensibility.RulesBuilder.RulesBuilderResult.Formula">
      <summary>Gets the formula that the user entered.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueue">
      <summary>Provides support for custom autopilot queues.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueueManager">
      <summary>Represents the queue manager hosting one or more queues.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService">
      <summary>Provides support for controlling DriveWorks Autopilot.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.IChildSpecificationRequest">
      <summary>Encapsulates all the data required to automate the specification of a sub-project.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.IConnector">
      <summary>Provides a contract for plug-ins which can connect to external systems and receive specifications from them.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnector">
      <summary>Provides a contract for a group connector.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorEditor">
      <summary>Provides a contract between the DriveWorks Administrator Connector management view, and a connector designer's view UI.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorRegistration">
      <summary>Provides a contract for objects which provides information about group connectors.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.ISolidWorksHealthMonitor">
      <summary>Provides access to the SolidWorks "Nurse", the component of DriveWorks which is responsible for monitoring the health of SolidWorks processes used for model
and preview generation.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.ISolidWorksOperation">
      <summary>Represents a single model generation operation being coordinated by the .</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.ISolidWorksOperationBatch">
      <summary>Represents a model generation batch being coordinated by the .</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation">
      <summary>Provides a means by which to automate one or more Specifications within DriveWorks Server.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest">
      <summary>Encapsulates all the data required to automate the specification of a project.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.ITranslationRequest">
      <summary>Represents a translation request.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.ITranslator">
      <summary>Provides a contract for plug-ins which can take raw data and translate it into an series of
 instances.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueue.BeginStart">
      <summary>Starts the queue on a new thread and returns a wait handle which can be used to wait for the queue to finish starting.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueue.BeginStop">
      <summary>Stops the queue and returns a wait handle which can be used to wait for the queue to finish stopping.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueue.Initialize(DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueueManager)">
      <summary>Initializes the queue.</summary>
      <param name="queueManager">The queue manager.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueueManager.GetQueue(System.Type)">
      <summary>Gets any queues which implement the specified service.</summary>
      <returns>A collection of queues matching the search criteria.</returns>
      <param name="queueType">The type of service to search for.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueueManager.GetQueue``1">
      <summary>Gets any queues which implement the specified service.</summary>
      <returns>A collection of queues matching the search criteria.</returns>
      <typeparam name="TQueue">The type of service to search for.</typeparam>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueueManager.Application">
      <summary>Gets the application hosting the queue manager.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.BeginStart">
      <summary>Begins starting the autopilot capability.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">A group has not been opened.</exception>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.BeginStop">
      <summary>Begins stopping the autopilot capability.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.IsRunning">
      <summary>Determines whether the service is running.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.IsStarting">
      <summary>Determines whether the service is in the process of being started.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.IsStopping">
      <summary>Determines whether the service is in the process of being stopped.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.Started">
      <summary>Raised when the service is started.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.Starting">
      <summary>Raised when the service is starting.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.Stopped">
      <summary>Raised when the service is stopped.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.IAutopilotService.Stopping">
      <summary>Raised when the service is stopping.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IChildSpecificationRequest.ControlName">
      <summary>Gets/sets the name of the sub-project control targetted by this child specification.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IConnector.Start">
      <summary>Starts a stopped connector, or resumes a paused connector.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IConnector.Stop">
      <summary>Stops the connector to prevent new specifications being received.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.IConnector.Started">
      <summary>Occurs when a connector has started.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.IConnector.Stopped">
      <summary>Occurs when a connector has stopped.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnector.GetEditor">
      <summary>Gets an editor that will providing editing features for the current connector.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnector.Initialize(DriveWorks.Applications.IApplication)">
      <summary>Called after creating a new instance, this should be responsible for setting up the connector to its context.</summary>
      <param name="application">The application that the connector is in.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnector.SetInformation(DriveWorks.GroupConnectorInformation)">
      <summary>Used to inform this connector of it's connector details. This will be called after connector creation and whenever the details are updated.</summary>
      <param name="info">The new group connect details for this connector.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnector.Start">
      <summary>Called to start the connector processing.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnector.Stop">
      <summary>Called to stop the connector processing.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorEditor.Close(System.Boolean)">
      <summary>Called by the connector management view to notify the connector view UI that it is being closed by the user.</summary>
      <returns>False to abort closing the view, otherwise true. Please note that no message will be shown to the user if the close is aborted, therefore it is up to the view
to let the user know why the close was aborted.</returns>
      <param name="save">Whether or not to save changes in current editor back into the connector.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorEditor.Initialize">
      <summary>Called whenever the editor is about to be shown.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorEditor.EditorUI">
      <summary>Gets either a  or a <see cref="T:System.Windows.UIElement" /> that will providing editing features for a connector.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorRegistration.ConnectorType">
      <summary>Gets the type of group connector supported by the designer (must be derived from ).</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorRegistration.Description">
      <summary>Gets the description of the group connector.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorRegistration.DisplayName">
      <summary>Gets the display name of the group connector.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorRegistration.Image">
      <summary>Gets the image for the group connector.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.IGroupConnectorRegistration.InformationType">
      <summary>Gets the type of group connector data that this connector uses (must be derived from ).</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISolidWorksHealthMonitor.BeginBatch(DriveWorks.Applications.Autopilot.Extensibility.SolidWorksBatchHint)">
      <summary>Notifies the monitor of the intention to begin a batch of model generation.</summary>
      <returns>An operation batch which can be used to coordinate model generation.</returns>
      <param name="hint">Provides hints to the monitor about the nature of the batch.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISolidWorksHealthMonitor.DelaySolidWorksResponsivenessCheck(System.TimeSpan)">
      <summary>Delays the SolidWorks responsiveness check for the specified amount of time. The time span will be added to the current system time to determine when the check
should next be performed.</summary>
      <param name="delay">The amount of time to wait until checking for SolidWorks responsiveness.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISolidWorksOperation.Complete">
      <summary>Notifies the health monitor that the operation has completed successfully. If this method is not called by the time the operation is disposed, the health
monitor will assume that something went wrong, and that SolidWorks should likely be restarted.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISolidWorksOperation.Continue">
      <summary>Notifies the health monitor that the operation is on-going, and the SolidWorks instance is still working as expected.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISolidWorksOperationBatch.BeginOperation(DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationPriority,DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationType)">
      <summary>Notifies the SolidWorks Health Monitor of the intention to start a model generation operation. This method call blocks the current thread until exclusive
access to SolidWorks is available.</summary>
      <returns>An operation which can be used to coordinate the execution of the operation with the SolidWorks Health Monitor.</returns>
      <param name="priority">The priority of this operation relative to others.</param>
      <param name="type">The type of the operation.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.CreateSpecificationRequest">
      <summary>Creates a new specification request.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Specify(DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest,System.Boolean)">
      <summary>Starts a new specification based on the passed-in instance of </summary>
      <param name="request">An instance of  representing the data to be specified.</param>
      <param name="waitForCompletion">True to wait for the specification to complete, false to queue the specification and return immediately.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.String)">
      <summary>Translates the data in the specified file.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="fileName">The full path to the file name.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.String,System.IO.Stream)">
      <summary>Translates the data in the specified file.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="fileName">The full path to the file name.</param>
      <param name="data">A seekable stream containing the file data.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.String,System.IO.Stream,System.Text.Encoding)">
      <summary>Translates the data in the specified file.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="fileName">The full path to the file name.</param>
      <param name="data">A seekable stream containing the file data.</param>
      <param name="encoding">The encoding to use when reading the file.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.String,System.IO.Stream,System.String)">
      <summary>Translates the data in the specified file.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="fileName">The full path to the file name.</param>
      <param name="data">A seekable stream containing the file data.</param>
      <param name="mimeType">The MIME type of the file contents.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.String,System.IO.Stream,System.Text.Encoding,System.String)">
      <summary>Translates the data in the specified file.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="fileName">The full path to the file name.</param>
      <param name="data">A seekable stream containing the file data.</param>
      <param name="encoding">The encoding to use when reading the file.</param>
      <param name="mimeType">The MIME type of the file contents.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.IO.Stream)">
      <summary>Translates the data in the specified stream.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="data">A seekable stream containing the data to translate.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.IO.Stream,System.Text.Encoding)">
      <summary>Translates the data in the specified stream.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="data">A seekable stream containing the data to translate.</param>
      <param name="encoding">The encoding to use when reading the data.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.IO.Stream,System.String)">
      <summary>Translates the data in the specified stream.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="data">A seekable stream containing the data to translate.</param>
      <param name="mimeType">The MIME type of the stream contents.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationAutomation.Translate(System.IO.Stream,System.Text.Encoding,System.String)">
      <summary>Translates the data in the specified stream.</summary>
      <returns>A null reference if no translator understands the file contents, otherwise, an array of specification requests.</returns>
      <param name="data">A seekable stream containing the data to translate.</param>
      <param name="encoding">The encoding to use when reading the data.</param>
      <param name="mimeType">The MIME type of the stream contents.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest.AddChildSpecification">
      <summary>Adds and returns a new child specification request.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest.AddInput(System.String,System.String)">
      <summary>Adds an input to be changed in the specification.</summary>
      <param name="inputName">The name of the constant or form control to change.</param>
      <param name="inputValue">The value to drive.</param>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest.ProjectName">
      <summary>Gets/sets the name of the project to specify.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest.TransitionName">
      <summary>Gets the name of the transition to invoke when the specification has been filled in.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest.InputsDriven">
      <summary>Occurs when the inputs are driven into to the specification.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest.ProjectNameInvalid">
      <summary>Occurs when the specification is being processed and a project with the given name can't be located.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest.Specifying">
      <summary>Occurs when the  is being processed by DriveWorks.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.ISpecificationRequest.TransitionFailed">
      <summary>Occurs when the specification is being processed and a transition with the given name is invalid.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ITranslationRequest.GetStream">
      <summary>Gets a stream for the translation request.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ITranslationRequest.GetStreamReader">
      <summary>Gets a stream reader for the stream taking into account the encoding if it was specified.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.ITranslationRequest.Encoding">
      <summary>The encoding if known, otherwise, a null reference (Nothing in Visual Basic).</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.ITranslationRequest.FileName">
      <summary>The file name of the data to be translated if known, otherwise, a null reference (Nothing in Visual Basic).</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.ITranslationRequest.MimeType">
      <summary>The MIME type of the data to be translated if known, otherwise, a null reference (Nothing in Visual Basic).</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ITranslator.Translate(DriveWorks.Applications.Autopilot.Extensibility.ITranslationRequest)">
      <summary>Translates the specified raw data into a series of instances of .</summary>
      <returns>An array of instances of  if the raw data was successfully translated, otherwise a
null reference (Nothing in Visual Basic).</returns>
      <param name="request">The raw data to be translated.</param>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksBatchHint">
      <summary>Provides hints to the health monitor about a batch.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksBatchHint.None">
      <summary>No specific hints are assigned to the batch.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksBatchHint.Single">
      <summary>The batch consists of a single model, therefore, if the "Restart After Batch" behavior is in play, the health monitor should consider coalescing batches before
restarting SolidWorks for optimum efficiency.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationPriority">
      <summary>Represents the relative priority of an operation being coordinated by the .</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationPriority.Immediate">
      <summary>The operation requires immediate processing.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationPriority.Normal">
      <summary>The operation should be queued behind any others.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationType">
      <summary>Indicates the type of an operation being coordinated by the .</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationType.SpecificationModel">
      <summary>The operation is going to generate a model for a specification.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationType.PreviewModel">
      <summary>The operation is going to generate a model for a preview.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.SolidWorksOperationType.Other">
      <summary>The operation is going to generate a model for some other reason.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames">
      <summary>Provides access to the names of common views in DriveWorks Autopilot.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase">
      <summary>Provides a base class to make implementing connectors easier.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1">
      <summary>Provides a base class to make implementing group connectors easier.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.GroupPollingConnectorBase`1">
      <summary>Provides a base class for group connectors which use a polling strategy.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase">
      <summary>Provides a base class to make implementing polling autopilot queues easier.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.PollingConnectorBase">
      <summary>Provides a base class for connectors which use a polling strategy.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1">
      <summary>Provides a base class to make implementing queueing autopilot queues easier.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.SpecificationRequestInputsDrivenEventArgs">
      <summary>Provides information about the results of driving a specification request's inputs.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Autopilot.Extensibility.TransitionFailedEventArgs">
      <summary>Provides event data for the  event.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.Autopilot">
      <summary>Name for the Autopilot view Autopilot.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.Emails">
      <summary>Name for the Autopilot view Emails.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.GroupConnectors">
      <summary>Name for the Autopilot view Connectors.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.GroupSpecification">
      <summary>Name for the Autopilot view GroupSpecification.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.GroupSpecificationExplorer">
      <summary>Name for the Autopilot view GroupSpecificationExplorer.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.Help">
      <summary>Name for the Autopilot view DriveWorksHelp.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.ModelExplorer">
      <summary>Name for the Autopilot view ModelExplorer.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.Today">
      <summary>Name for the Autopilot view DriveWorksToday.</summary>
    </member>
    <member name="F:DriveWorks.Applications.Autopilot.Extensibility.AutopilotViewNames.Triggers">
      <summary>Name for the Autopilot view Triggers.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.OnInitialize">
      <summary>When overridden in a derived class, performs the work required to initialize the connector.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.OnStart">
      <summary>Performs the work required to start the connector.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.OnStop">
      <summary>Provides the work required to stop the connector.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.RaiseStarted(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.RaiseStopped(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.Application">
      <summary>Gets the hosting application.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.Automation">
      <summary>Gets the specification automation service.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.Started">
      <summary>Occurs when a connector has started.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Autopilot.Extensibility.ConnectorBase.Stopped">
      <summary>Occurs when a connector has stopped.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.AddEvent(DriveWorks.Applications.ApplicationEventType,System.String,System.String)">
      <summary>Adds an event into the application log.</summary>
      <param name="type">The type of event to add.</param>
      <param name="description">The body of the event entry.</param>
      <param name="targetName">The target of the current body of work that this event is for.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.GetEditor">
      <summary>Gets the editor user interface for this group connector.</summary>
      <returns>Either a  or a <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.OnStart">
      <summary>Performs the work required to start the connector.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.OnStop">
      <summary>Provides the work required to stop the connector.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.Start">
      <summary>Starts this connector running.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.Stop">
      <summary>Stops this connector running.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.StoreInformation">
      <summary>When called this will store the current information into this group.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.Application">
      <summary>Gets the hosting application.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.Automation">
      <summary>Gets the specification automation service.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.ConnectorInfo">
      <summary>Gets the details for this connector.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.GroupConnectorBase`1.EventDisplayName">
      <summary>Gets the name to use in log events for this connector.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupPollingConnectorBase`1.OnExecute">
      <summary>Performs the work on each polling interval.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupPollingConnectorBase`1.OnStart">
      <summary>Starts the polling thread.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.GroupPollingConnectorBase`1.OnStop">
      <summary>Stops the polling thread.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.GroupPollingConnectorBase`1.PollingInterval">
      <summary>Gets/sets the polling interval.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.BeginStart">
      <summary>Begins the process of starting the queue on a new thread.</summary>
      <returns>A wait handle which can be used to determine when the queue has started.</returns>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.BeginStop">
      <summary>Begins the process of stopping the queue.</summary>
      <returns>A wait handle which can be used to determine when the queue has stopped.</returns>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.Execute">
      <summary>Must be overridden to perform the main work of the queue.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.Initialize(DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueueManager)">
      <summary>Can be overridden to perform custom initialization when the queue is created.</summary>
      <param name="queueManager">The queue manager.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.InitializeThread(System.Threading.Thread)">
      <summary>Can be overridden to customize the thread that is used for execution.</summary>
      <param name="thread">The thread to be customized.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.OnStart">
      <summary>Can be overridden to perform one-time initialization when the queue is started.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.OnStop">
      <summary>Can be overridden to perform shutdown when the queue is stopped.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.WaitForIntervalOrStopRequest">
      <summary>Waits until either the polling interval elapses, or a request to stop is made.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.IsStopping">
      <summary>Determines whether the queue is in the process of starting.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.PollingAutopilotQueueBase.SyncRoot">
      <summary>Gets an object which can be use to synchronize access to the queue.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.PollingConnectorBase.OnExecute">
      <summary>Performs the work on each polling interval.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.PollingConnectorBase.IsStopping">
      <summary>Determines whether the connector is running and has been asked to stop.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.PollingConnectorBase.PollingInterval">
      <summary>Gets/sets the polling interval.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.BeginStart">
      <summary>Begins the process of starting the queue on a new thread.</summary>
      <returns>A wait handle which can be used to determine when the queue has started.</returns>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.BeginStop">
      <summary>Begins the process of stopping the queue.</summary>
      <returns>A wait handle which can be used to determine when the queue has stopped.</returns>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.Execute(`0)">
      <summary>Must be overridden to perform the main work of the queue on the specified item.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.Initialize(DriveWorks.Applications.Autopilot.Extensibility.IAutopilotQueueManager)">
      <summary>Can be overridden to perform custom initialization when the queue is created.</summary>
      <param name="queueManager">The queue manager.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.InitializeThread(System.Threading.Thread)">
      <summary>Can be overridden to customize the thread that is used for execution.</summary>
      <param name="thread">The thread to be customized.</param>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.OnStart">
      <summary>Can be overridden to perform one-time initialization when the queue is started.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.OnStop">
      <summary>Can be overridden to perform shutdown when the queue is stopped.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.QueueItem(`0)">
      <summary>Queues the specified work item.</summary>
      <param name="item">The work item to process.</param>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.IsStopping">
      <summary>Determines whether the queue is in the process of starting.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.QueueCount">
      <summary>Gets the number of work items in the queue.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.QueueingAutopilotQueueBase`1.SyncRoot">
      <summary>Gets an object which can be use to synchronize access to the queue.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.SpecificationRequestInputsDrivenEventArgs.#ctor(System.String[])">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="failedInputNames">The names of the inputs that were unable to be driven.</param>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.SpecificationRequestInputsDrivenEventArgs.FailedInputNames">
      <summary>Gets the names of the inputs that were unable to be driven.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Autopilot.Extensibility.TransitionFailedEventArgs.#ctor(System.Exception,System.Boolean)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="exception">The exception that occurred during execution of the transition, e.g. if the transition could not be found, or the user doesn't have permissions to access the
transition.</param>
      <param name="result">The result of executing the transition, e.g. false if the conditions on the transition could not be satisfied.</param>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.TransitionFailedEventArgs.Exception">
      <summary>The exception that occurred during execution of the transition, e.g. if the transition could not be found, or the user doesn't have permissions to access the
transition.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Autopilot.Extensibility.TransitionFailedEventArgs.Result">
      <summary>The result of executing the transition, e.g. false if the conditions on the transition could not be satisfied.</summary>
    </member>
    <member name="T:DriveWorks.Applications.DataManagement.Extensibility.ITask">
      <summary>Provides support for adding Tasks to the DataManagement Tasks view.</summary>
    </member>
    <member name="M:DriveWorks.Applications.DataManagement.Extensibility.ITask.Invoke(DriveWorks.Applications.IApplication)">
      <summary>Invokes the task</summary>
    </member>
    <member name="P:DriveWorks.Applications.DataManagement.Extensibility.ITask.Description">
      <summary>A description of the task</summary>
    </member>
    <member name="P:DriveWorks.Applications.DataManagement.Extensibility.ITask.Image">
      <summary>An image that represents the task</summary>
    </member>
    <member name="P:DriveWorks.Applications.DataManagement.Extensibility.ITask.Title">
      <summary>The title of the task</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IApplicationModule">
      <summary>Provides a contract for a module of a DriveWorks application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IApplicationPlugin">
      <summary>Provides a contract for a plugin to a DriveWorks application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IApplicationPluginInfo">
      <summary>Provides information about an application plugin.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IApplicationPluginManager">
      <summary>Provides access to the application plugins loaded into a DriveWorks applications.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IApplicationStateController">
      <summary>Provides support for controlling a registered state.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IApplicationStateManager">
      <summary>Provides support for registered application-level states.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IHasConfiguration">
      <summary>Implemented by plugins which provide configuration.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IHasEnabled">
      <summary>Implemented by plugins which support being enabled or disabled.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.ILibraryInfo">
      <summary>Provides information about a library.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.ILibraryManager">
      <summary>Provides access to libraries.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.IProjectTemplateHelper">
      <summary>Provides a contract for types which provide project creation capabilities.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IApplicationModule.Initialize(DriveWorks.Applications.IApplication)">
      <summary>Initializes the module.</summary>
      <param name="application">The application which is hosting the DriveWorks API.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IApplicationPlugin.Initialize(DriveWorks.Applications.IApplication)">
      <summary>Initializes the plugin.</summary>
      <param name="application">The application which is hosting the DriveWorks API.</param>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IApplicationPluginInfo.Assembly">
      <summary>Gets the library from which the plugin was loaded.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IApplicationPluginInfo.Description">
      <summary>Gets the localized description of the plugin.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IApplicationPluginInfo.DisplayName">
      <summary>Gets the localized display name of the plugin.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IApplicationPluginInfo.Instance">
      <summary>Gets the instance of the plugin.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IApplicationPluginInfo.LoadException">
      <summary>If an exception occurred loading the plugin, gets the exception that occurred.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IApplicationPluginInfo.Name">
      <summary>Gets the invariant name of the plugin.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IApplicationPluginManager.GetApplicationPlugins">
      <summary>Gets an array of application plugins that are loaded into the application.</summary>
      <returns>An array of information about the loaded application plugins.</returns>
    </member>
    <member name="E:DriveWorks.Applications.Extensibility.IApplicationPluginManager.ApplicationPluginLoaded">
      <summary>Occurs when an application plugin has been loaded into the application.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IApplicationStateController.NotifyIsChanging">
      <summary>Notify state controller and manager that the current state is about to be changed.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IApplicationStateController.IsSet">
      <summary>Gets/sets whether the state is set.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IApplicationStateManager.BeginStateChange">
      <summary>Suppresses state change events until  is called.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IApplicationStateManager.EndStateChange">
      <summary>Resumes state change events.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IApplicationStateManager.RegisterState(System.Guid)">
      <summary>Registers the given state and returns an object which can be used to control it.</summary>
      <returns>A state controller.</returns>
      <param name="stateId">The unique identifier of the state to register.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IHasConfiguration.ShowConfiguration(System.Windows.Forms.IWin32Window)">
      <summary>Shows the configuration user interface.</summary>
      <param name="owner">The parent window for any dialogs.</param>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IHasEnabled.IsEnabled">
      <summary>Determines whether the plugin is enabled.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryInfo.Load(System.Boolean)">
      <summary>Loads the library if it hasn't already been loaded.</summary>
      <param name="throwOnError">True to allow exceptions to be thrown when loading the library.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryInfo.GetExtensibilityAttributes">
      <summary>Gets the extensibility attributes for the library.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryInfo.GetExtensibilityAttributes(System.Type)">
      <summary>Gets the extensibility attributes of the specified type for the library.</summary>
      <returns>An array of the extensibility attribute of the specified type.</returns>
      <param name="attributeType">The type of extensibility attribute to get.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryInfo.GetExtensibilityAttributes``1">
      <summary>Gets the extensibility attributes of the specified type for the extension library.</summary>
      <returns>An array of the extensibility attribute of the specified type.</returns>
      <typeparam name="T">The type of extensibility attribute to get.</typeparam>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.Assembly">
      <summary>Gets the assembly if it is loaded, or a null reference otherwise.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.Description">
      <summary>Gets the localized description of the library.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.DisplayName">
      <summary>Gets the display name of the assembly directly from the assembly if it has been loaded, otherwise from the fallback display name.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.ExtensionTypes">
      <summary>Gets the extension types in the assembly.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.FallbackDisplayName">
      <summary>Gets the display name of the assembly from its registered information.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.InvariantName">
      <summary>Gets the invariant name of the extension library.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.IsFrameworkLibrary">
      <summary>Determines whether the library is a framework library.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.LastLoadException">
      <summary>If an exception occurred loading the extension library, this property will retrieve the exception.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.LastTypeLoadException">
      <summary>If an exception occurred loading the extension library's types, this property will retrieve the exception.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.LoadOnStartup">
      <summary>Determines whether the library is loaded on start up.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.Location">
      <summary>Gets the location of the library.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.Publisher">
      <summary>Gets the name of the library publisher.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ILibraryInfo.PublisherUrl">
      <summary>Gets a URL pointing to a web site for the library or its publisher.</summary>
    </member>
    <member name="E:DriveWorks.Applications.Extensibility.ILibraryInfo.Loaded">
      <summary>Occurs when the library is loaded.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryManager.GetLibraries">
      <summary>Gets an array of the libraries that are loaded into the application.</summary>
      <returns>An array of information about the loaded libraries.</returns>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryManager.GetLibrary(System.String,System.Boolean)">
      <summary>Gets the library with the specified invariant name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The specified library could not be found.</exception>
      <returns>The specified library.</returns>
      <param name="invariantName">The invariant name of the library to retrieve.</param>
      <param name="throwOnError">True to throw an error if the type cannot be found, false to return a null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryManager.GetTypeFromLibrary(System.String,System.Boolean)">
      <summary>Gets a type from a library.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The specified type could not be found.</exception>
      <returns>The specified type.</returns>
      <param name="fullTypeName">The type string which identifies the name of the type and its parent library.</param>
      <param name="throwOnError">True to throw an error if the type cannot be found, false to return a null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryManager.GetTypesFromLibraries(System.Type,System.Type[])">
      <summary>Gets types which inherit from the specified base type, or implement the specified interface.</summary>
      <returns>An array of types meeting the specified filter.</returns>
      <param name="baseType">The type of a class from which the returned types must inherit, or an interface which the returned types must implement.</param>
      <param name="attributes">An array of attributes which must be defined on the returned types, or a null reference if no attribute filtering is required.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryManager.TryGetLibrary(System.String,DriveWorks.Applications.Extensibility.ILibraryInfo@)">
      <summary>Gets the library with the specified invariant name.</summary>
      <returns>True if the library was found and returned, otherwise false.</returns>
      <param name="invariantName">The invariant name of the library to retrieve.</param>
      <param name="result">Receives the specified library.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ILibraryManager.TryGetTypeFromLibrary(System.String,System.Type@)">
      <summary>Gets a type from a library.</summary>
      <returns>True if the specified type was found and returned, otherwise false.</returns>
      <param name="fullTypeName">The type string which identifies the name of the type and its parent library.</param>
      <param name="result">Receives the specified type.</param>
    </member>
    <member name="E:DriveWorks.Applications.Extensibility.ILibraryManager.LibraryLoaded">
      <summary>Occurs when a library has been loaded into the application.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.CreateProject(DriveWorks.Applications.Extensibility.ProjectCreationData)">
      <summary>Creates the project based on the template.</summary>
      <param name="pcd">The project creation data which describe the project to be created.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.Initialize(System.String)">
      <summary>Initializes the template helper with the path to the template.</summary>
      <param name="templatePath">The path to the template, or a null reference (Nothing in Visual Basic) if the template helper is standalone.</param>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.IsValid(DriveWorks.Applications.IApplication)">
      <summary>Indicates whether the current template is valid for this application.</summary>
      <param name="application">The DriveWorks application.</param>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.Category">
      <summary>Gets the localized category of the template.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.Description">
      <summary>Gets the localized description of the template.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.Image">
      <summary>Gets the icon which represents the template.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.RequiresFolder">
      <summary>Determines whether the template requires a folder.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The template helper has not been initialized.</exception>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.RequiresName">
      <summary>Determines whether the template requires a name.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The template helper has not been initialized.</exception>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.Title">
      <summary>Gets the localized title of the template.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.IProjectTemplateHelper.TooltipDescription">
      <summary>Gets the localized tooltip description for the template.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.ApplicationPluginAttribute">
      <summary>Provides information about an application plugin to a DriveWorks Application.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.ApplicationPluginLoadedEventArgs">
      <summary>Provides event data for the  event.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.LibraryEventArgs">
      <summary>Provides event data for the events on the  class.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.ProjectCreationData">
      <summary>Provides information about a project to be created.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.ProjectTemplateHelperAttribute">
      <summary>Supports automatic discovery of project template helpers in a library.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ApplicationPluginAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="name">The invariant name of the plugin.</param>
      <param name="displayName">The localized display name of the plugin.</param>
      <param name="description">The localized description of the plugin.</param>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ApplicationPluginAttribute.Description">
      <summary>Gets the localized description of the plugin.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ApplicationPluginAttribute.DisplayName">
      <summary>Gets the localized display name of the plugin.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ApplicationPluginAttribute.Name">
      <summary>Gets the invariant name of the plugin.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ApplicationPluginLoadedEventArgs.#ctor(DriveWorks.Applications.Extensibility.IApplicationPluginInfo)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="applicationPluginInfo">Information about the application plugin that was loaded.</param>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ApplicationPluginLoadedEventArgs.ApplicationPluginInfo">
      <summary>Gets information about the application plugin that was loaded.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.LibraryEventArgs.#ctor(DriveWorks.Applications.Extensibility.ILibraryInfo)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="libraryInfo">Information about the library that was loaded.</param>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.LibraryEventArgs.LibraryInfo">
      <summary>Gets information about the library that was loaded.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ProjectCreationData.#ctor(DriveWorks.Applications.IApplication,System.String,System.String,DriveWorks.Applications.IGroupService,DriveWorks.Applications.IProjectService)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="application">The application hosting the wizard.</param>
      <param name="projectName">The name of the project to created if required by the template.</param>
      <param name="projectFolder">The folder in which to create the project if required by the template.</param>
      <param name="groupService">The group service.</param>
      <param name="projectService">The project service.</param>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ProjectCreationData.Application">
      <summary>Gets the application hosting the wizard.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ProjectCreationData.GroupService">
      <summary>Gets the group service.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ProjectCreationData.ProjectFolder">
      <summary>Gets the folder in which to create the project if required by the template.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ProjectCreationData.ProjectName">
      <summary>Gets the name of the project to be created if required by the template.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ProjectCreationData.ProjectService">
      <summary>Gets the project service.</summary>
    </member>
    <member name="M:DriveWorks.Applications.Extensibility.ProjectTemplateHelperAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="projectTemplateHelperType">The CLR type of the project template helper.</param>
      <param name="standalone">True if the template helper can be instantiated without a corresponding template, otherwise false.</param>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ProjectTemplateHelperAttribute.IsStandalone">
      <summary>Gets whether the project template helper can be instantiated with a corresponding template.</summary>
      <returns>True if the template helper is a standalone template, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ProjectTemplateHelperAttribute.Name">
      <summary>Gets the name of the project template helper.</summary>
    </member>
    <member name="P:DriveWorks.Applications.Extensibility.ProjectTemplateHelperAttribute.ProjectTemplateHelperType">
      <summary>Gets the CLR type of the project template helper.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.ApplicationPluginLoadedEventHandler">
      <summary>Represents a method that will handle the  event.</summary>
    </member>
    <member name="T:DriveWorks.Applications.Extensibility.LibraryEventHandler">
      <summary>Represents a method that will handle events for the  class.</summary>
    </member>
  </members>
</doc>